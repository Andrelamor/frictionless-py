(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{106:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return l})),n.d(t,"toc",(function(){return s})),n.d(t,"default",(function(){return p}));var a=n(3),r=n(7),o=(n(0),n(157)),i={title:"Resource Guide"},l={unversionedId:"guides/framework/resource-guide",id:"guides/framework/resource-guide",isDocsHomePage:!1,title:"Resource Guide",description:"This guide in under development. We are moving some shared Resource information from describe, extract, validate, and transform guides to this guide.",source:"@site/../docs/guides/framework/resource-guide.md",slug:"/guides/framework/resource-guide",permalink:"/docs/guides/framework/resource-guide",editUrl:"https://github.com/frictionlessdata/frictionless-py/edit/master/docs/../docs/guides/framework/resource-guide.md",version:"current",lastUpdatedBy:"roll",lastUpdatedAt:1613573443,sidebar:"guides",previous:{title:"Package Guide",permalink:"/docs/guides/framework/package-guide"},next:{title:"Schema Guide",permalink:"/docs/guides/framework/schema-guide"}},s=[{value:"Exploring Data",id:"exploring-data",children:[]},{value:"Resource Lifecycle",id:"resource-lifecycle",children:[]},{value:"File Details",id:"file-details",children:[{value:"Scheme",id:"scheme",children:[]},{value:"Format",id:"format",children:[]},{value:"Hashing",id:"hashing",children:[]},{value:"Encoding",id:"encoding",children:[]},{value:"Compression",id:"compression",children:[]},{value:"Compression Path",id:"compression-path",children:[]}]},{value:"File Control",id:"file-control",children:[]},{value:"Table Dialect",id:"table-dialect",children:[]},{value:"Resource Options",id:"resource-options",children:[{value:"On Error",id:"on-error",children:[]}]}],c={toc:s};function p(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"This guide in under development. We are moving some shared Resource information from describe, extract, validate, and transform guides to this guide.")),Object(o.b)("h2",{id:"exploring-data"},"Exploring Data"),Object(o.b)("p",null,"There are various functions to help explore your resource, such as checking a header or other attributes like stats:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"from frictionless import Resource\n\nwith Resource('tmp/country.resource.json', basepath='.') as resource:\n    print(f'Source: \"{resource.source}\"')\n    print(f'Scheme: \"{resource.scheme}\"')\n    print(f'Format: \"{resource.format}\"')\n    print(f'Hashing: \"{resource.hashing}\"')\n    print(f'Encoding: \"{resource.encoding}\"')\n    print(f'Innerpaath: \"{resource.innerpath}\"')\n    print(f'Compression: \"{resource.compression}\"')\n    pprint(resource.read_header())\n    pprint(resource.read_sample())\n    pprint(resource.read_stats())\n")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"Source: \"data/capital-3.csv\"\nScheme: \"file\"\nFormat: \"csv\"\nHashing: \"md5\"\nEncoding: \"utf-8\"\nInnerpath: \"\"\nCompression: \"\"\n['id', 'capital_id', 'name', 'population']\n[['1', '1', 'Britain', '67'],\n ['2', '3', 'France', '67'],\n ['3', '2', 'Germany', '83'],\n ['4', '5', 'Italy', '60'],\n ['5', '4', 'Spain', '47']]\n{'bytes': 100,\n 'fields': 4,\n 'hash': 'c0558b91523683483f86f63346d06d81',\n 'rows': 5}\n")),Object(o.b)("p",null,"There is much more information available; we will explain some of it later in the sections below:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"from frictionless import Table\n\nwith Resource('data/capital-3.csv') as resource:\n  print(f'Control: \"{resource.control}\"')\n  print(f'Dialect: \"{resource.dialect}\"')\n  print(f'Layout: \"{resource.layout}\"')\n  print(f'Schema: \"{resource.schema}\"')\n  print(f'Stats: \"{resource.stats}\"')\n  print(f'Fragment: \"{resource.fragment}\"')\n  print(f'Header: \"{resource.header}\"')\n")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"Control: \"{}\"\nDialect: \"{}\"\nLayout: \"{}\"\nSchema: \"{'fields': [{'name': 'id', 'type': 'integer'}, {'name': 'name', 'type': 'string'}]}\"\nStats: \"{'hash': 'e7b6592a0a4356ba834e4bf1c8e8c7f8', 'bytes': 50, 'fields': 2, 'rows': 0}\"\nFragment: \"[['1', 'London'], ['2', 'Berlin'], ['3', 'Paris'], ['4', 'Madrid'], ['5', 'Rome']]\"\nHeader: \"['id', 'name']\"\n")),Object(o.b)("p",null,"Many of the properties above not only can be read from the existent Table but also can be provided as an option to alter the Table behaviour, for example:"),Object(o.b)("h2",{id:"resource-lifecycle"},"Resource Lifecycle"),Object(o.b)("p",null,"You might have noticed that we had to duplicate the ",Object(o.b)("inlineCode",{parentName:"p"},"with Table(...)")," statement in some examples. The reason is that Table is a streaming interface. Once it's read you need to open it again. Let's show it in an example:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"from frictionless import Table\n\ntable = Table('data/capital-3.csv')\ntable.open()\npprint(table.read_rows())\npprint(table.read_rows())\n# We need to re-open: there is no data left\ntable.open()\npprint(table.read_rows())\n# We need to close manually: not context manager is used\ntable.close()\n")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"[Row([('id', 1), ('name', 'London')]),\n Row([('id', 2), ('name', 'Berlin')]),\n Row([('id', 3), ('name', 'Paris')]),\n Row([('id', 4), ('name', 'Madrid')]),\n Row([('id', 5), ('name', 'Rome')])]\n[]\n[Row([('id', 1), ('name', 'London')]),\n Row([('id', 2), ('name', 'Berlin')]),\n Row([('id', 3), ('name', 'Paris')]),\n Row([('id', 4), ('name', 'Madrid')]),\n Row([('id', 5), ('name', 'Rome')])]\n")),Object(o.b)("h2",{id:"file-details"},"File Details"),Object(o.b)("p",null,"Let's overview the details we can specify for a file. Usually you don't need to provide those details as Frictionless is capable to infer it on its own. Although, there are situation when you need to specify it manually. The following example will use the ",Object(o.b)("inlineCode",{parentName:"p"},"Table")," class but the same options can be used for the ",Object(o.b)("inlineCode",{parentName:"p"},"extract")," and ",Object(o.b)("inlineCode",{parentName:"p"},"extract_table")," functions."),Object(o.b)("h3",{id:"scheme"},"Scheme"),Object(o.b)("p",null,"The scheme also know as protocol indicates which loader Frictionless should use to read or write data. It can be ",Object(o.b)("inlineCode",{parentName:"p"},"file")," (default), ",Object(o.b)("inlineCode",{parentName:"p"},"text"),", ",Object(o.b)("inlineCode",{parentName:"p"},"http"),", ",Object(o.b)("inlineCode",{parentName:"p"},"https"),", ",Object(o.b)("inlineCode",{parentName:"p"},"s3"),", and others."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"from frictionless import Table\n\nwith Table('header1,header2\\nvalue1,value2.csv', scheme='text') as table:\n  print(table.scheme)\n  print(table.read_rows())\n")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"text\n[Row([('header1', 'value1'), ('header2', 'value2.csv')])]\n")),Object(o.b)("h3",{id:"format"},"Format"),Object(o.b)("p",null,"The format or as it's also called extension helps Frictionless to choose a proper parser to handle the file. Popular formats are ",Object(o.b)("inlineCode",{parentName:"p"},"csv"),", ",Object(o.b)("inlineCode",{parentName:"p"},"xlsx"),", ",Object(o.b)("inlineCode",{parentName:"p"},"json")," and others"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"from frictionless import Table\n\nwith Table('text://header1,header2\\nvalue1,value2.csv', format='csv') as table:\n  print(table.format)\n  print(table.read_rows())\n")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"csv\n[Row([('header1', 'value1'), ('header2', 'value2')])]\n")),Object(o.b)("h3",{id:"hashing"},"Hashing"),Object(o.b)("p",null,"The hashing option controls which hashing algorithm should be used for generating the ",Object(o.b)("inlineCode",{parentName:"p"},"hash")," property. It doesn't affect the ",Object(o.b)("inlineCode",{parentName:"p"},"extract")," function but can be used with the ",Object(o.b)("inlineCode",{parentName:"p"},"Table")," class:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"from frictionless import Table\n\nwith Table('data/country-3.csv', hashing='sha256') as table:\n  table.read_rows()\n  print(table.hashing)\n  print(table.stats['hash'])\n")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"sha256\n408b5058f961915c1e1f3bc318ab01d7d094a4daccdf03ad6022cfc7b8ea4e3e\n")),Object(o.b)("h3",{id:"encoding"},"Encoding"),Object(o.b)("p",null,"Frictionless automatically detects encoding of files but sometimes it can be inaccurate. It's possible to provide an encoding manually:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"from frictionless import Table\n\nwith Table('data/country-3.csv', encoding='utf-8') as table:\n  print(table.encoding)\n  print(table.source)\n")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"utf-8\ndata/country-3.csv\n")),Object(o.b)("h3",{id:"compression"},"Compression"),Object(o.b)("p",null,"It's possible to adjust compression detection by providing the algorithm explicitly. For the example below it's not required as it would be detected anyway:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"from frictionless import Table\n\nwith Table('data/table.csv.zip', compression='zip') as table:\n  print(table.compression)\n  print(table.read_rows())\n")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"zip\n[Row([('id', 1), ('name', 'english')]), Row([('id', 2), ('name', '\u4e2d\u56fd\u4eba')])]\n")),Object(o.b)("h3",{id:"compression-path"},"Compression Path"),Object(o.b)("p",null,"By default, Frictionless uses the first file found in a zip archive. It's possible to adjust this behaviour:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"from frictionless import Table\n\nwith Table('data/table-multiple-files.zip', compression_path='table-reverse.csv') as table:\n  print(table.compression)\n  print(table.compression_path)\n  print(table.read_rows())\n")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"zip\ntable-reverse.csv\n[Row([('id', 1), ('name', '\u4e2d\u56fd\u4eba')]), Row([('id', 2), ('name', 'english')])]\n")),Object(o.b)("p",null,"Further reading:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Schemes Reference"),Object(o.b)("li",{parentName:"ul"},"Formats Reference")),Object(o.b)("h2",{id:"file-control"},"File Control"),Object(o.b)("p",null,"The Control object allows you to manage the loader used by the Table class. In most cases, you don't need to provide any Control settings but sometimes it can be useful:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"from frictionless import Table\nfrom frictionless.plugins.remote import RemoteControl\n\nsource = 'https://raw.githubusercontent.com/frictionlessdata/frictionless-py/master/data/table.csv'\ncontrol = RemoteControl(http_timeout=10)\nwith Table(source, control=control) as table:\n  print(table.control)\n  print(table.read_rows())\n")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"{'httpTimeout': 10, 'newline': ''}\n[Row([('id', 1), ('name', 'english')]), Row([('id', 2), ('name', '\u4e2d\u56fd\u4eba')])]\n")),Object(o.b)("p",null,'Exact parameters depend on schemes and can be found in the "Schemes Reference". For example, the Remote Control provides ',Object(o.b)("inlineCode",{parentName:"p"},"http_timeout"),", ",Object(o.b)("inlineCode",{parentName:"p"},"http_session"),", and others but there is only one option available for all controls:"),Object(o.b)("h2",{id:"table-dialect"},"Table Dialect"),Object(o.b)("p",null,"The Dialect adjusts the way tabular parsers work. The concept is similar to the Control above. Let's use the CSV Dialect to adjust the delimiter configuration:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"from frictionless import Table\nfrom frictionless.plugins.csv import CsvDialect\n\nsource = 'header1;header2\\nvalue1;value2'\ndialect = CsvDialect(delimiter=';')\nwith Table(source, scheme='text', format='csv', dialect=dialect) as table:\n  print(table.dialect)\n  print(table.read_rows())\n")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"{'delimiter': ';'}\n[Row([('header1', 'value1'), ('header2', 'value2')])]\n")),Object(o.b)("p",null,'There are a great deal of options available for different dialects that can be found in "Formats Reference". We will list the properties that can be used with every dialect:'),Object(o.b)("h2",{id:"resource-options"},"Resource Options"),Object(o.b)("p",null,"Extraction function and classes accepts a few options that are needed to manage integrity behaviour:"),Object(o.b)("h3",{id:"on-error"},"On Error"),Object(o.b)("p",null,"This option accept one of the three possible values configuring an ",Object(o.b)("inlineCode",{parentName:"p"},"extract"),", ",Object(o.b)("inlineCode",{parentName:"p"},"Table"),", ",Object(o.b)("inlineCode",{parentName:"p"},"Resource")," or ",Object(o.b)("inlineCode",{parentName:"p"},"Package")," behaviour if there is an error during the row reading process:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"ignore (default)"),Object(o.b)("li",{parentName:"ul"},"warn"),Object(o.b)("li",{parentName:"ul"},"raise")),Object(o.b)("p",null,"Let's investigate how we can add warnings on all header/row errors:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},'from frictionless import Table\n\ndata = [["name"], [1], [2], [3]]\nschema = {"fields": [{"name": "name", "type": "string"}]}\nwith  Table(data, schema=schema, onerror="warn") as table:\n  table.read_rows()\n')),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'/home/roll/projects/frictionless-py/frictionless/table.py:771: UserWarning: The cell "1" in row at position "2" and field "name" at position "1" has incompatible type: type is "string/default"\n  warnings.warn(error.message, UserWarning)\n/home/roll/projects/frictionless-py/frictionless/table.py:771: UserWarning: The cell "2" in row at position "3" and field "name" at position "1" has incompatible type: type is "string/default"\n  warnings.warn(error.message, UserWarning)\n/home/roll/projects/frictionless-py/frictionless/table.py:771: UserWarning: The cell "3" in row at position "4" and field "name" at position "1" has incompatible type: type is "string/default"\n  warnings.warn(error.message, UserWarning)\n')),Object(o.b)("p",null,"In some cases, we need to fail on the first error. We will use ",Object(o.b)("inlineCode",{parentName:"p"},"raise")," for it:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},'from frictionless import Table\n\ndata = [["name"], [1], [2], [3]]\nschema = {"fields": [{"name": "name", "type": "string"}]}\nresource = Resource(data=data, schema=schema)\nresource.onerror = \'raise\' # for Resource/Package it\'s possible to set this property after initialization\ntry:\n  resource.read_rows()\nexcept Exception as exception:\n  print(exception)\n')),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'[type-error] The cell "1" in row at position "2" and field "name" at position "1" has incompatible type: type is "string/default"\n')))}p.isMDXComponent=!0},157:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return m}));var a=n(0),r=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=r.a.createContext({}),p=function(e){var t=r.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},b=function(e){var t=p(e.components);return r.a.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),b=p(n),u=a,m=b["".concat(i,".").concat(u)]||b[u]||d[u]||o;return n?r.a.createElement(m,l(l({ref:t},c),{},{components:n})):r.a.createElement(m,l({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);