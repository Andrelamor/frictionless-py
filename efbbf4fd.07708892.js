(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{124:function(e,a,t){"use strict";t.r(a),t.d(a,"frontMatter",(function(){return o})),t.d(a,"metadata",(function(){return l})),t.d(a,"toc",(function(){return c})),t.d(a,"default",(function(){return d}));var n=t(3),i=t(7),r=(t(0),t(131)),o={title:"Validating Data"},l={unversionedId:"guides/validating-data",id:"guides/validating-data",isDocsHomePage:!1,title:"Validating Data",description:"Tabular data validation is a process of identifying tabular problems that have place in your data for further correction. Let's explore how Frictionless helps to achieve these tasks using an invalid data table example:",source:"@site/../docs/guides/validating-data.md",slug:"/guides/validating-data",permalink:"/docs/guides/validating-data",editUrl:"https://github.com/frictionlessdata/frictionless-py/edit/master/../docs/guides/validating-data.md",version:"current",lastUpdatedBy:"roll",lastUpdatedAt:1611144640,sidebar:"guides",previous:{title:"Extracting Data",permalink:"/docs/guides/extracting-data"},next:{title:"Transforming Data",permalink:"/docs/guides/transforming-data"}},c=[{value:"Validate Functions",id:"validate-functions",children:[{value:"Validating Schema",id:"validating-schema",children:[]},{value:"Validating Resource",id:"validating-resource",children:[]},{value:"Validating Package",id:"validating-package",children:[]},{value:"Validating Inquiry",id:"validating-inquiry",children:[]},{value:"Validating Table",id:"validating-table",children:[]}]},{value:"Validation Options",id:"validation-options",children:[{value:"Schema/Inquiry",id:"schemainquiry",children:[]},{value:"Resource/Package",id:"resourcepackage",children:[]},{value:"Table",id:"table",children:[]}]},{value:"Validation Report",id:"validation-report",children:[]},{value:"Validation Errors",id:"validation-errors",children:[]},{value:"Errors Options",id:"errors-options",children:[{value:"Pick/Skip Errors",id:"pickskip-errors",children:[]},{value:"Limit Errors",id:"limit-errors",children:[]}]},{value:"Memory Options",id:"memory-options",children:[{value:"Limit Memory",id:"limit-memory",children:[]}]},{value:"Checks Options",id:"checks-options",children:[{value:"Checksum",id:"checksum",children:[]},{value:"Extra Checks",id:"extra-checks",children:[]}]},{value:"Baseline Check",id:"baseline-check",children:[]},{value:"Heuristic Checks",id:"heuristic-checks",children:[{value:"Duplicate Row",id:"duplicate-row",children:[]},{value:"Deviated Value",id:"deviated-value",children:[]},{value:"Truncated Value",id:"truncated-value",children:[]}]},{value:"Regulation Checks",id:"regulation-checks",children:[{value:"Blacklisted Value",id:"blacklisted-value",children:[]},{value:"Sequential Value",id:"sequential-value",children:[]},{value:"Row Constraint",id:"row-constraint",children:[]}]},{value:"Custom Checks",id:"custom-checks",children:[]}],s={toc:c};function d(e){var a=e.components,t=Object(i.a)(e,["components"]);return Object(r.b)("wrapper",Object(n.a)({},s,t,{components:a,mdxType:"MDXLayout"}),Object(r.b)("p",null,"Tabular data validation is a process of identifying tabular problems that have place in your data for further correction. Let's explore how Frictionless helps to achieve these tasks using an invalid data table example:"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"! cat data/capital-invalid.csv\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{}),"id,name,name\n1,London,Britain\n2,Berlin,Germany\n3,Paris,France\n4,Madrid,Spain\n5,Rome,Italy\n6,Zagreb,Croatia\n7,Athens,Greece\n8,Vienna,Austria\n8,Warsaw\n\nx,Tokio,Japan,review\n")),Object(r.b)("p",null,"Using the command-line interface we can validate this file. Frictionless provides comprehensive error details so it's self-explanatory. Continue reading to learn the validation process in-details."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"! frictionless validate data/capital-invalid.csv\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{}),'---\ninvalid: data/capital-invalid.csv\n---\n\n====  =====  ================  ====================================================================================================================\nrow   field  code              message\n====  =====  ================  ====================================================================================================================\nNone      3  duplicate-header  Header "name" in field at position "3" is duplicated to header in another field: at position "2"\n  10      3  missing-cell      Row at position "10" has a missing cell in field "name2" at position "3"\n  11  None   blank-row         Row at position "11" is completely blank\n  12      4  extra-cell        Row at position "12" has an extra value in field at position "4"\n  12      1  type-error        The cell "x" in row at position "12" and field "id" at position "1" has incompatible type: type is "integer/default"\n====  =====  ================  ====================================================================================================================\n')),Object(r.b)("h2",{id:"validate-functions"},"Validate Functions"),Object(r.b)("p",null,"The high-level interface for validating data provided by Frictionless is a set of ",Object(r.b)("inlineCode",{parentName:"p"},"validate")," functions:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"validate"),": it will detect the source type and validate data accordingly"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"validate_schema"),": it validates a schema's metadata"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"validate_resource"),": it validates a resource's data and metadata"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"validate_package"),": it validates a package's data and metadata"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"validate_inquiery"),": it validates a special ",Object(r.b)("inlineCode",{parentName:"li"},"Inquiery")," object which represents a validation task instruction"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"validate_table"),": it validates a table")),Object(r.b)("p",null,"In command-line, there is only 1 command but there is a flag to adjust the behavior:"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-sh"}),"$ frictionless validate\n$ frictionless validate --source-type schema\n$ frictionless validate --source-type resource\n$ frictionless validate --source-type package\n$ frictionless validate --source-type inquiry\n$ frictionless validate --source-type table\n")),Object(r.b)("h3",{id:"validating-schema"},"Validating Schema"),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"validate_schema")," function is the only function validating solely metadata. Let's create a invalid table schema:"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"from frictionless import Schema\n\nschema = Schema()\nschema.fields = {} # must be a list\nschema.to_yaml('tmp/invalid.schema.yaml')\n")),Object(r.b)("p",null,"And validate it using the command-line interface:"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"! frictionless validate tmp/invalid.schema.yaml\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{}),'---\ninvalid: tmp/invalid.schema.yaml\n---\n============  ===============================================================================================================================================================================\ncode          message\n============  ===============================================================================================================================================================================\nschema-error  The data source could not be successfully described by the invalid Table Schema: "{} is not of type \'array\'" at "fields" in metadata and at "properties/fields/type" in profile\n============  ===============================================================================================================================================================================\n')),Object(r.b)("p",null,"Schema validation can be very useful when you work with different classes of tables and create schemas for them. Using this function you can ensure that the metadata is valid."),Object(r.b)("h3",{id:"validating-resource"},"Validating Resource"),Object(r.b)("p",null,'As it was shown in the "Describing Data" guide a resource is a container having both metadata and data. We need to create a resource descriptor to validate it:'),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"! frictionless describe data/capital-invalid.csv --json > tmp/capital.resource.json\n")),Object(r.b)("p",null,"Let's now use the command-line interface to ensure that we are getting the same result as we had without using a resource:"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"! frictionless validate tmp/capital.resource.json --basepath .\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{}),'---\ninvalid: ./data/capital-invalid.csv\n---\n\n====  =====  ================  ====================================================================================================================\nrow   field  code              message\n====  =====  ================  ====================================================================================================================\nNone      3  duplicate-header  Header "name" in field at position "3" is duplicated to header in another field: at position "2"\n  10      3  missing-cell      Row at position "10" has a missing cell in field "name2" at position "3"\n  11  None   blank-row         Row at position "11" is completely blank\n  12      4  extra-cell        Row at position "12" has an extra value in field at position "4"\n  12      1  type-error        The cell "x" in row at position "12" and field "id" at position "1" has incompatible type: type is "integer/default"\n====  =====  ================  ====================================================================================================================\n')),Object(r.b)("p",null,"Okay, why do we need to use a resource descriptor if the result is the same? The reason is metadata + data packaging. Let's extend our resource descriptor:"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"from frictionless import describe\n\nresource = describe('data/capital-invalid.csv')\nresource['bytes'] = 100 # wrong\nresource['hash'] = 'ae23c74693ca2d3f0e38b9ba3570775b' # wrong\nresource.to_yaml('tmp/capital.resource.yaml')\n")),Object(r.b)("p",null,"We have added a few bad metrics to our resource descriptor. The validation below reports it in addition to all the errors we had before. This example is showing how concepts like Data Resource can be extremely useful when working with data."),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"! frictionless validate tmp/capital.resource.yaml --basepath .\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{}),'---\ninvalid: ./data/capital-invalid.csv\n---\n\n====  =====  ================  ====================================================================================================================\nrow   field  code              message\n====  =====  ================  ====================================================================================================================\nNone      3  duplicate-header  Header "name" in field at position "3" is duplicated to header in another field: at position "2"\n  10      3  missing-cell      Row at position "10" has a missing cell in field "name2" at position "3"\n  11  None   blank-row         Row at position "11" is completely blank\n  12      4  extra-cell        Row at position "12" has an extra value in field at position "4"\n  12      1  type-error        The cell "x" in row at position "12" and field "id" at position "1" has incompatible type: type is "integer/default"\n====  =====  ================  ====================================================================================================================\n')),Object(r.b)("h3",{id:"validating-package"},"Validating Package"),Object(r.b)("p",null,"A package is a set of resources + additional metadata. To showcase a package validation we need one more tabular file:"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"! cat data/capital-valid.csv\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{}),"id,name\n1,London\n2,Berlin\n3,Paris\n4,Madrid\n5,Rome\n")),Object(r.b)("p",null,"Let's describe and validate a package:"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"! frictionless describe data/capital-*id.csv --json > tmp/capital.package.json\n! frictionless validate tmp/capital.package.json --basepath .\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{}),'---\ninvalid: ./data/capital-invalid.csv\n---\n\n====  =====  ================  ====================================================================================================================\nrow   field  code              message\n====  =====  ================  ====================================================================================================================\nNone      3  duplicate-header  Header "name" in field at position "3" is duplicated to header in another field: at position "2"\n  10      3  missing-cell      Row at position "10" has a missing cell in field "name2" at position "3"\n  11  None   blank-row         Row at position "11" is completely blank\n  12      4  extra-cell        Row at position "12" has an extra value in field at position "4"\n  12      1  type-error        The cell "x" in row at position "12" and field "id" at position "1" has incompatible type: type is "integer/default"\n====  =====  ================  ====================================================================================================================\n\n\n---\nvalid: ./data/capital-valid.csv\n---\n')),Object(r.b)("p",null,"As we can see, the result is pretty straight-forward and expected: we have one invalid resource and one valid. One important note regarding the package validation: if there are more than one resource, it will use multiprocessing to speed up the process"),Object(r.b)("h3",{id:"validating-inquiry"},"Validating Inquiry"),Object(r.b)("p",null,"The Inquiry gives you an ability to create arbitrary validation jobs containing a set of individual validation tasks. Let's create an inquiry that includes an individual file validation and a resource validation:"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"from frictionless import Inquiry\n\ninquiry = Inquiry({'tasks': [\n  {'source': 'data/capital-valid.csv'},\n  {'source': 'tmp/capital.resource.json', 'basepath': '.'},\n]})\ninquiry.to_yaml('tmp/capital.inquiry.yaml')\n")),Object(r.b)("p",null,"Tasks in the Inquiry accept the same arguments written in camelCase as the corresponding ",Object(r.b)("inlineCode",{parentName:"p"},"validate")," functions have. As usual, let' run validation:"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"! frictionless validate tmp/capital.inquiry.yaml\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{}),'---\nvalid: data/capital-valid.csv\n---\n---\ninvalid: ./data/capital-invalid.csv\n---\n\n====  =====  ================  ====================================================================================================================\nrow   field  code              message\n====  =====  ================  ====================================================================================================================\nNone      3  duplicate-header  Header "name" in field at position "3" is duplicated to header in another field: at position "2"\n  10      3  missing-cell      Row at position "10" has a missing cell in field "name2" at position "3"\n  11  None   blank-row         Row at position "11" is completely blank\n  12      4  extra-cell        Row at position "12" has an extra value in field at position "4"\n  12      1  type-error        The cell "x" in row at position "12" and field "id" at position "1" has incompatible type: type is "integer/default"\n====  =====  ================  ====================================================================================================================\n')),Object(r.b)("p",null,"At first sight, it's no clear why such a construct exists but when your validation workflow gets complex, the Inquiry can provide a lot of flexibility and power. Last but not least, the Inquiry will use multiprocessing if there are more than 1 task provided."),Object(r.b)("h3",{id:"validating-table"},"Validating Table"),Object(r.b)("p",null,"All the functions above except for ",Object(r.b)("inlineCode",{parentName:"p"},"validate_schema")," are just wrappers over the ",Object(r.b)("inlineCode",{parentName:"p"},"validate_table")," function. Below we will be talking a lot about the table validation so here will just provide a simple example:"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"! frictionless validate data/capital-invalid.csv --pick-errors duplicate-header\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{}),'---\ninvalid: data/capital-invalid.csv\n---\n\n====  =====  ================  ================================================================================================\nrow   field  code              message\n====  =====  ================  ================================================================================================\nNone      3  duplicate-header  Header "name" in field at position "3" is duplicated to header in another field: at position "2"\n====  =====  ================  ================================================================================================\n')),Object(r.b)("p",null,"Please keep reading to learn about the table validation in-detail."),Object(r.b)("h2",{id:"validation-options"},"Validation Options"),Object(r.b)("p",null,"Let's overview options that the described ",Object(r.b)("inlineCode",{parentName:"p"},"validate")," functions accept:"),Object(r.b)("h3",{id:"schemainquiry"},"Schema/Inquiry"),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"validate_schema")," and ",Object(r.b)("inlineCode",{parentName:"p"},"validate_inquiry")," don't accept any options in addition to ",Object(r.b)("inlineCode",{parentName:"p"},"source"),"."),Object(r.b)("h3",{id:"resourcepackage"},"Resource/Package"),Object(r.b)("p",null,"The Resource and Package incapsulate most of information within their descriptor so the amount of additional options is really limited:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"basepath"),": base path for a resource/package"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"noinfer"),": a flag disabling an infer function call")),Object(r.b)("h3",{id:"table"},"Table"),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"validate_table")," function accept most of the ",Object(r.b)("inlineCode",{parentName:"p"},"describe/extract")," function's options:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},'File Details (see "Extracting Data")'),Object(r.b)("li",{parentName:"ul"},'File Control (see "Extracting Data")'),Object(r.b)("li",{parentName:"ul"},'Table Dialect (see "Extracting Data")'),Object(r.b)("li",{parentName:"ul"},'Table Query (see "Extracting Data")'),Object(r.b)("li",{parentName:"ul"},'Header Options (see "Extracting Data")'),Object(r.b)("li",{parentName:"ul"},'Schema Options (see "Extracting Data")'),Object(r.b)("li",{parentName:"ul"},'Integrity Options (see "Extracting Data")'),Object(r.b)("li",{parentName:"ul"},'Infer Options (see "Describing Data")'),Object(r.b)("li",{parentName:"ul"},"Errors Options"),Object(r.b)("li",{parentName:"ul"},"Memory Options"),Object(r.b)("li",{parentName:"ul"},"Checks Options")),Object(r.b)("h2",{id:"validation-report"},"Validation Report"),Object(r.b)("p",null,"All the ",Object(r.b)("inlineCode",{parentName:"p"},"validate")," functions return the Validation Report. It's an unified object containing information about a validation: source details, found error, etc. Let's explore a report:"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"from pprint import pprint\nfrom frictionless import validate\n\nreport = validate('data/capital-invalid.csv', pick_errors=['duplicate-header'])\npprint(report)\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{}),"{'errors': [],\n 'stats': {'errors': 1, 'tables': 1},\n 'tables': [{'compression': 'no',\n             'compressionPath': '',\n             'dialect': {},\n             'encoding': 'utf-8',\n             'errors': [{'cell': 'name',\n                         'cells': ['id', 'name', 'name'],\n                         'code': 'duplicate-header',\n                         'description': 'Two columns in the header row have '\n                                        'the same value. Column names should '\n                                        'be unique.',\n                         'fieldName': 'name2',\n                         'fieldNumber': 3,\n                         'fieldPosition': 3,\n                         'message': 'Header \"name\" in field at position \"3\" is '\n                                    'duplicated to header in another field: at '\n                                    'position \"2\"',\n                         'name': 'Duplicate Header',\n                         'note': 'at position \"2\"',\n                         'tags': ['#head', '#structure']}],\n             'format': 'csv',\n             'hashing': 'md5',\n             'header': ['id', 'name', 'name'],\n             'partial': False,\n             'path': 'data/capital-invalid.csv',\n             'query': {},\n             'schema': {'fields': [{'name': 'id', 'type': 'integer'},\n                                   {'name': 'name', 'type': 'string'},\n                                   {'name': 'name2', 'type': 'string'}]},\n             'scheme': 'file',\n             'scope': ['duplicate-header'],\n             'stats': {'bytes': 171,\n                       'errors': 1,\n                       'fields': 3,\n                       'hash': 'dcdeae358cfd50860c18d953e021f836',\n                       'rows': 11},\n             'time': 0.019,\n             'valid': False}],\n 'time': 0.019,\n 'valid': False,\n 'version': '3.38.1'}\n")),Object(r.b)("p",null,'As we can see, there are a lot of information; you can find its details description in "API Reference". Errors are grouped by tables; for some validation there are can be dozens of tables. Let\'s use the ',Object(r.b)("inlineCode",{parentName:"p"},"report.flatten")," function to simplify errors representation:"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"from frictionless import validate\n\nreport = validate('data/capital-invalid.csv', pick_errors=['duplicate-header'])\npprint(report.flatten(['rowPosition', 'fieldPosition', 'code', 'message']))\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{}),"[[None,\n  3,\n  'duplicate-header',\n  'Header \"name\" in field at position \"3\" is duplicated to header in another '\n  'field: at position \"2\"']]\n")),Object(r.b)("p",null,"In some situation, an error can't be associated with a table; then it goes to the top-level ",Object(r.b)("inlineCode",{parentName:"p"},"report.errors")," property:"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"from frictionless import validate_schema\n\nreport = validate_schema('bad.json')\npprint(report)\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{}),"{'errors': [{'code': 'schema-error',\n             'description': 'Provided schema is not valid.',\n             'message': 'The data source could not be successfully described '\n                        'by the invalid Table Schema: cannot extract metadata '\n                        '\"bad.json\" because \"[Errno 2] No such file or '\n                        'directory: \\'bad.json\\'\"',\n             'name': 'Schema Error',\n             'note': 'cannot extract metadata \"bad.json\" because \"[Errno 2] No '\n                     'such file or directory: \\'bad.json\\'\"',\n             'tags': ['#table', '#schema']}],\n 'stats': {'errors': 1, 'tables': 0},\n 'tables': [],\n 'time': 0.0,\n 'valid': False,\n 'version': '3.38.1'}\n")),Object(r.b)("h2",{id:"validation-errors"},"Validation Errors"),Object(r.b)("p",null,"The Error object is at the heart of the validation process. The Report has ",Object(r.b)("inlineCode",{parentName:"p"},"report.errors")," and ",Object(r.b)("inlineCode",{parentName:"p"},"report.tables[].errors")," properties that can contain the Error object. Let's explore it:"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"from frictionless import validate\n\nreport = validate('data/capital-invalid.csv', pick_errors=['duplicate-header'])\nerror = report.table.error # it's only available for 1 table / 1 error sitution\nprint(f'Code: \"{error.code}\"')\nprint(f'Name: \"{error.name}\"')\nprint(f'Tags: \"{error.tags}\"')\nprint(f'Note: \"{error.note}\"')\nprint(f'Message: \"{error.message}\"')\nprint(f'Description: \"{error.description}\"')\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{}),'Code: "duplicate-header"\nName: "Duplicate Header"\nTags: "[\'#head\', \'#structure\']"\nNote: "at position "2""\nMessage: "Header "name" in field at position "3" is duplicated to header in another field: at position "2""\nDescription: "Two columns in the header row have the same value. Column names should be unique."\n')),Object(r.b)("p",null,"Above, we have listed universal error properties. Depending on the type of an error there can be additional ones. For example, for our ",Object(r.b)("inlineCode",{parentName:"p"},"duplicate-header")," error:"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"from frictionless import validate\n\nreport = validate('data/capital-invalid.csv', pick_errors=['duplicate-header'])\nerror = report.table.error # it's only available for 1 table / 1 error sitution\npprint(error)\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{}),"{'cell': 'name',\n 'cells': ['id', 'name', 'name'],\n 'code': 'duplicate-header',\n 'description': 'Two columns in the header row have the same value. Column '\n                'names should be unique.',\n 'fieldName': 'name2',\n 'fieldNumber': 3,\n 'fieldPosition': 3,\n 'message': 'Header \"name\" in field at position \"3\" is duplicated to header in '\n            'another field: at position \"2\"',\n 'name': 'Duplicate Header',\n 'note': 'at position \"2\"',\n 'tags': ['#head', '#structure']}\n")),Object(r.b)("p",null,'Please explore "Errors Reference" to learn about all the available errors and their properties.'),Object(r.b)("h2",{id:"errors-options"},"Errors Options"),Object(r.b)("p",null,"We have already seen a few mentions of error options like ",Object(r.b)("inlineCode",{parentName:"p"},"pick_errors"),". Let's take a look at all of them. These options are similar to the ",Object(r.b)("inlineCode",{parentName:"p"},"extract"),"'s counterparts for fields and rows."),Object(r.b)("h3",{id:"pickskip-errors"},"Pick/Skip Errors"),Object(r.b)("p",null,"We can pick or skip errors providing a list of error codes. For example:"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"from frictionless import validate\n\nreport1 = validate('data/capital-invalid.csv', pick_errors=['duplicate-header'])\nreport2 = validate('data/capital-invalid.csv', skip_errors=['duplicate-header'])\npprint(report1.flatten(['rowPosition', 'fieldPosition', 'code']))\npprint(report2.flatten(['rowPosition', 'fieldPosition', 'code']))\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{}),"[[None, 3, 'duplicate-header']]\n[[10, 3, 'missing-cell'],\n [11, None, 'blank-row'],\n [12, 4, 'extra-cell'],\n [12, 1, 'type-error']]\n")),Object(r.b)("p",null,'It\'s also possible to use error tags (for more information please consult with "Errors Reference"):'),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"from frictionless import validate\n\nreport1 = validate('data/capital-invalid.csv', pick_errors=['#head'])\nreport2 = validate('data/capital-invalid.csv', skip_errors=['#body'])\npprint(report1.flatten(['rowPosition', 'fieldPosition', 'code']))\npprint(report2.flatten(['rowPosition', 'fieldPosition', 'code']))\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{}),"[[None, 3, 'duplicate-header']]\n[[None, 3, 'duplicate-header']]\n")),Object(r.b)("h3",{id:"limit-errors"},"Limit Errors"),Object(r.b)("p",null,'This option is self-explanatory and can be used when you need to "fail fast" or get a limited amount of errors:'),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"from frictionless import validate\n\nreport = validate('data/capital-invalid.csv', limit_errors=1)\npprint(report.flatten(['rowPosition', 'fieldPosition', 'code']))\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{}),"[[None, 3, 'duplicate-header']]\n")),Object(r.b)("h2",{id:"memory-options"},"Memory Options"),Object(r.b)("p",null,"Frictionless is a streaming engine; usually it's possible to validate terrabytes of data with basically O(1) memory consumption. For some validation, it's not the case because Frctionless needs to buffer some cells e.g. to checks uniqueness. Here memory management can be handy."),Object(r.b)("h3",{id:"limit-memory"},"Limit Memory"),Object(r.b)("p",null,"Default memory limit is 1000MB. You can adjust it based on your exact use case. For example, if you're running Frictionless as an API server you might reduce the memory usage. If a validation hits the limit it will not raise of fail - it will return a report with a task error:"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-py"}),'from frictionless import validate\n\nsource = lambda: ([integer] for integer in range(1, 100000000))\nschema = {"fields": [{"name": "integer", "type": "integer"}], "primaryKey": "integer"}\nreport = validate(source, headers=False, schema=schema, limit_memory=50)\nprint(report.flatten(["code", "note"]))\n# [[\'task-error\', \'exceeded memory limit "50MB"\']]\n')),Object(r.b)("h2",{id:"checks-options"},"Checks Options"),Object(r.b)("p",null,"There are two check options: ",Object(r.b)("inlineCode",{parentName:"p"},"checksum")," and ",Object(r.b)("inlineCode",{parentName:"p"},"extra_checks"),". The first allows to make stricter a baseline validation white the latter is used to enforce additional checks."),Object(r.b)("h3",{id:"checksum"},"Checksum"),Object(r.b)("p",null,"We can provide a hash string, the amount of bytes, and the amount of rows. Frictionless will ensure as a part of a validation that the actual values match the expected ones. Let's show for the hash:"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"from frictionless import validate\n\nreport = validate('data/capital-invalid.csv', checksum={'hash': 'bad'}, pick_errors=['#checksum'])\nprint(report.flatten([\"code\", \"note\"]))\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{}),"[['checksum-error', 'expected hash in md5 is \"bad\" and actual is \"dcdeae358cfd50860c18d953e021f836\"']]\n")),Object(r.b)("p",null,"The same can be show for the bytes and rows:"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"from frictionless import validate\n\nreport = validate('data/capital-invalid.csv', checksum={'bytes': 10, 'rows': 10}, pick_errors=['#checksum'])\npprint(report.flatten([\"code\", \"note\"]))\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{}),"[['checksum-error', 'expected bytes count is \"10\" and actual is \"171\"'],\n ['checksum-error', 'expected rows count is \"10\" and actual is \"11\"']]\n")),Object(r.b)("h3",{id:"extra-checks"},"Extra Checks"),Object(r.b)("p",null,"It's possible to provide a list of extra checks where individual checks are in the form of:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"a string: ",Object(r.b)("inlineCode",{parentName:"li"},"check-name")),Object(r.b)("li",{parentName:"ul"},"a list: ",Object(r.b)("inlineCode",{parentName:"li"},"['check-name', {'option1': 'value1'}]"))),Object(r.b)("p",null,"It's also possible to use a ",Object(r.b)("inlineCode",{parentName:"p"},"Check"),' subclass instead of name which will be shown in the "Custom Checks" section. Let\'s have a loot at an example:'),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"from frictionless import validate\n\nreport = validate('data/capital-invalid.csv', extra_checks=[('sequential-value', {'fieldName': 'id'})])\npprint(report.flatten([\"rowPosition\", \"fieldPosition\", \"code\", \"note\"]))\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{}),"[[None, 3, 'duplicate-header', 'at position \"2\"'],\n [10, 3, 'missing-cell', ''],\n [10, 1, 'sequential-value', 'the value is not sequential'],\n [11, None, 'blank-row', ''],\n [12, 4, 'extra-cell', ''],\n [12, 1, 'type-error', 'type is \"integer/default\"']]\n")),Object(r.b)("p",null,"See the sections below for a list of available checks."),Object(r.b)("h2",{id:"baseline-check"},"Baseline Check"),Object(r.b)("p",null,"By default, Frictionless runs only the Baseline Check but includes various smaller checks revealing a great deal of tabular errors. There is a ",Object(r.b)("inlineCode",{parentName:"p"},"report.tables[].scope")," property to check what exact errors it have been checked for:"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"from frictionless import validate\n\nreport = validate('data/capital-invalid.csv')\npprint(report.table.scope)\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{}),"['dialect-error',\n 'schema-error',\n 'field-error',\n 'extra-header',\n 'missing-header',\n 'blank-header',\n 'duplicate-header',\n 'non-matching-header',\n 'extra-cell',\n 'missing-cell',\n 'blank-row',\n 'type-error',\n 'constraint-error',\n 'unique-error',\n 'primary-key-error',\n 'foreign-key-error',\n 'checksum-error']\n")),Object(r.b)("h2",{id:"heuristic-checks"},"Heuristic Checks"),Object(r.b)("p",null,"There is a group of checks that indicate probable errors. You need to use the ",Object(r.b)("inlineCode",{parentName:"p"},"extra_checks")," argument of the ",Object(r.b)("inlineCode",{parentName:"p"},"validate")," function to active one or more of these checks."),Object(r.b)("h3",{id:"duplicate-row"},"Duplicate Row"),Object(r.b)("p",null,"This check is self-explanatory. You need to take into account that checking for duplicate rows can lean to high memory consumption on big files. Here is an example:"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"from pprint import pprint\nfrom frictionless import validate\n\nsource = 'header\\nvalue\\nvalue'\nreport = validate(source, scheme='text', format='csv', extra_checks=['duplicate-row'])\npprint(report.flatten(['code', 'message']))\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{}),"[['duplicate-row',\n  'Row at position 3 is duplicated: the same as row at position \"2\"']]\n")),Object(r.b)("h3",{id:"deviated-value"},"Deviated Value"),Object(r.b)("p",null,"This check uses the Python's builtin ",Object(r.b)("inlineCode",{parentName:"p"},"statistics")," module to check a field's data for deviations. By default, deviated values are outside of the average +- three standard deviations. Take a look at the ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/frictionlessdata/frictionless-py/blob/master/docs/target/api-reference/README.md#deviatedvaluecheck"}),"API Reference")," for more details about available options and default values. The exact algorithm can be found ",Object(r.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/frictionlessdata/frictionless-py/blob/7ae8bae9a9197adbfe443233a6bad8a94e065ece/frictionless/checks/heuristic.py#L94"}),"here"),". For example:"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'    from pprint import pprint\n    from frictionless import validate\n\n    source = [["temperature"], [1], [-2], [7], [0], [1], [2], [5], [-4], [1000], [8], [3]]\n    report = validate(source, extra_checks=[("deviated-value", {"fieldName": "temperature"})])\n    pprint(report.flatten(["code", "message"]))\n\n')),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{}),"[['deviated-value',\n  'There is a possible error because the value is deviated: value \"1000\" in '\n  'row at position \"10\" and field \"temperature\" is deviated \"[-809.88, '\n  '995.52]\"']]\n")),Object(r.b)("h3",{id:"truncated-value"},"Truncated Value"),Object(r.b)("p",null,"Sometime during the export from a database or another storage, data values can be truncated. This check tries to detect it. Let's explore some truncation indicators:"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'from pprint import pprint\nfrom frictionless import validate\n\nsource = [["int", "str"], ["a" * 255, 32767], ["good", 2147483647]]\nreport = validate(source, extra_checks=["truncated-value"],)\npprint(report.flatten(["code", "message"]))\n')),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{}),"[['truncated-value',\n  'The cell '\n  'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa '\n  'in row at position 2 and field int at position 1 has an error: value  is '\n  'probably truncated'],\n ['truncated-value',\n  'The cell 32767 in row at position 2 and field str at position 2 has an '\n  'error: value  is probably truncated'],\n ['truncated-value',\n  'The cell 2147483647 in row at position 3 and field str at position 2 has an '\n  'error: value  is probably truncated']]\n")),Object(r.b)("h2",{id:"regulation-checks"},"Regulation Checks"),Object(r.b)("p",null,"In the contrary to heuristic checks, regulation checks gives you an ability to provide additional rules for your data. Use the ",Object(r.b)("inlineCode",{parentName:"p"},"extra_checks")," argument of the ",Object(r.b)("inlineCode",{parentName:"p"},"validate")," function to active one or more of these checks."),Object(r.b)("h3",{id:"blacklisted-value"},"Blacklisted Value"),Object(r.b)("p",null,"This check ensures that some field doesn't have any blacklisted values. For example:"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"from pprint import pprint\nfrom frictionless import validate\n\nsource = 'header\\nvalue1\\nvalue2'\nextra_checks = [('blacklisted-value', {'fieldName': 'header', 'blacklist': ['value2']})]\nreport = validate(source, scheme='text', format='csv', extra_checks=extra_checks)\npprint(report.flatten(['code', 'message']))\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{}),"[['blacklisted-value',\n  'The cell value2 in row at position 3 and field header at position 1 has an '\n  'error: blacklisted values are \"[\\'value2\\']\"']]\n")),Object(r.b)("h3",{id:"sequential-value"},"Sequential Value"),Object(r.b)("p",null,"This check gives us an opportunity to validate sequential fields like primary keys or other similar data. It doesn't need to start from 0 or 1. We're providing a field name:"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"from pprint import pprint\nfrom frictionless import validate\n\nsource = 'header\\n2\\n3\\n5'\nextra_checks = [('sequential-value', {'fieldName': 'header'})]\nreport = validate(source, scheme='text', format='csv', extra_checks=extra_checks)\npprint(report.flatten(['code', 'message']))\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{}),"[['sequential-value',\n  'The cell 5 in row at position 4 and field header at position 1 has an '\n  'error: the value is not sequential']]\n")),Object(r.b)("h3",{id:"row-constraint"},"Row Constraint"),Object(r.b)("p",null,"This checks is the most powerful one as it uses the external ",Object(r.b)("inlineCode",{parentName:"p"},"simpleeval")," package allowing to evaluate arbitrary python expressions on data rows. Let's show on an example:"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),'from pprint import pprint\nfrom frictionless import validate\n\nsource = [\n  ["row", "salary", "bonus"],\n  [2, 1000, 200],\n  [3, 2500, 500],\n  [4, 1300, 500],\n  [5, 5000, 1000],\n]\nextra_checks=[("row-constraint", {"constraint": "salary == bonus * 5"})]\nreport = validate(source, extra_checks=extra_checks)\npprint(report.flatten(["code", "message"]))\n')),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{}),"[['row-constraint',\n  'The row at position 4 has an error: the row constraint to conform is '\n  '\"salary == bonus * 5\"']]\n")),Object(r.b)("h2",{id:"custom-checks"},"Custom Checks"),Object(r.b)("p",null,"There are many cases when built-in Frictionless' checks are not enough. It can be a business logic rule or specific quality requirement to the data. With Frictionless it's very easy to use your own custom checks. Let's see on an example:"),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{className:"language-python"}),"from pprint import pprint\nfrom frictionless import validate, errors, Check\n\n# Create check\nclass ForbidNumber(Check):\n    def validate_row(self, row):\n        if row['header'] == self['number']:\n          note = f\"number {self['number']} is forbidden!\"\n          yield errors.CellError.from_row(row, note=note, field_name='header')\n\n# Validate table\nsource = 'header\\n1\\n2\\n3'\nextra_checks=[(ForbidNumber, {'number': 2})]\nreport = validate(source,  scheme='text', format='csv', extra_checks=extra_checks)\npprint(report.flatten([\"rowPosition\", \"fieldPosition\", \"code\", \"note\"]))\n")),Object(r.b)("pre",null,Object(r.b)("code",Object(n.a)({parentName:"pre"},{}),"[[3, 1, 'cell-error', 'number 2 is forbidden!']]\n")),Object(r.b)("p",null,"Usually, it also makes sense to create a custom error for your custom check. The Check class provides other useful methods like ",Object(r.b)("inlineCode",{parentName:"p"},"validate_header"),' etc. Please read "API Reference" to learn it in details.'))}d.isMDXComponent=!0},131:function(e,a,t){"use strict";t.d(a,"a",(function(){return p})),t.d(a,"b",(function(){return m}));var n=t(0),i=t.n(n);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function o(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function l(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?o(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function c(e,a){if(null==e)return{};var t,n,i=function(e,a){if(null==e)return{};var t,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||(i[t]=e[t]);return i}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=i.a.createContext({}),d=function(e){var a=i.a.useContext(s),t=a;return e&&(t="function"==typeof e?e(a):l(l({},a),e)),t},p=function(e){var a=d(e.components);return i.a.createElement(s.Provider,{value:a},e.children)},b={inlineCode:"code",wrapper:function(e){var a=e.children;return i.a.createElement(i.a.Fragment,{},a)}},u=i.a.forwardRef((function(e,a){var t=e.components,n=e.mdxType,r=e.originalType,o=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),p=d(t),u=n,m=p["".concat(o,".").concat(u)]||p[u]||b[u]||r;return t?i.a.createElement(m,l(l({ref:a},s),{},{components:t})):i.a.createElement(m,l({ref:a},s))}));function m(e,a){var t=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var r=t.length,o=new Array(r);o[0]=u;var l={};for(var c in a)hasOwnProperty.call(a,c)&&(l[c]=a[c]);l.originalType=e,l.mdxType="string"==typeof e?e:n,o[1]=l;for(var s=2;s<r;s++)o[s]=t[s];return i.a.createElement.apply(null,o)}return i.a.createElement.apply(null,t)}u.displayName="MDXCreateElement"}}]);