(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{131:function(e,n,t){"use strict";t.d(n,"a",(function(){return d})),t.d(n,"b",(function(){return m}));var r=t(0),i=t.n(r);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=i.a.createContext({}),u=function(e){var n=i.a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},d=function(e){var n=u(e.components);return i.a.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return i.a.createElement(i.a.Fragment,{},n)}},f=i.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,a=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),d=u(t),f=r,m=d["".concat(a,".").concat(f)]||d[f]||p[f]||o;return t?i.a.createElement(m,s(s({ref:n},l),{},{components:t})):i.a.createElement(m,s({ref:n},l))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,a=new Array(o);a[0]=f;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,a[1]=s;for(var l=2;l<o;l++)a[l]=t[l];return i.a.createElement.apply(null,a)}return i.a.createElement.apply(null,t)}f.displayName="MDXCreateElement"},87:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return a})),t.d(n,"metadata",(function(){return s})),t.d(n,"toc",(function(){return c})),t.d(n,"default",(function(){return u}));var r=t(3),i=t(7),o=(t(0),t(131)),a={title:"Resource Guide"},s={unversionedId:"guides/resource-guide",id:"guides/resource-guide",isDocsHomePage:!1,title:"Resource Guide",description:"This guide in under development. We are moving some shared Resource information from describe, extract, validate, and transform guides to this guide.",source:"@site/../docs/guides/resource-guide.md",slug:"/guides/resource-guide",permalink:"/docs/guides/resource-guide",editUrl:"https://github.com/frictionlessdata/frictionless-py/edit/master/docs/../docs/guides/resource-guide.md",version:"current",lastUpdatedBy:"roll",lastUpdatedAt:1612974654,sidebar:"guides",previous:{title:"Package Guide",permalink:"/docs/guides/package-guide"},next:{title:"Schema Guide",permalink:"/docs/guides/schema-guide"}},c=[{value:"Infer Options",id:"infer-options",children:[{value:"Infer Type",id:"infer-type",children:[]},{value:"Infer Names",id:"infer-names",children:[]},{value:"Infer Volume",id:"infer-volume",children:[]},{value:"Infer Confidence",id:"infer-confidence",children:[]},{value:"Infer Missing Values",id:"infer-missing-values",children:[]}]}],l={toc:c};function u(e){var n=e.components,t=Object(i.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},l,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"This guide in under development. We are moving some shared Resource information from describe, extract, validate, and transform guides to this guide.")),Object(o.b)("h2",{id:"infer-options"},"Infer Options"),Object(o.b)("p",null,"Let's explore some handy options to customize the infer process. All of them are available in some form for all the functions above and for different invocation types: in Python, in CLI, or for a REST server."),Object(o.b)("h3",{id:"infer-type"},"Infer Type"),Object(o.b)("p",null,"This option allows manually setting all the field types to a given type. It's useful when you need to skip data casting (setting ",Object(o.b)("inlineCode",{parentName:"p"},"any")," type) or have everything as a string (setting ",Object(o.b)("inlineCode",{parentName:"p"},"string")," type):"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"! frictionless describe data/country-1.csv --infer-type string\n")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"---\nmetadata: data/country-1.csv\n---\n\ncompression: 'no'\ncompressionPath: ''\ncontrol:\n  newline: ''\ndialect: {}\nencoding: utf-8\nformat: csv\nhashing: md5\nname: country-1\npath: data/country-1.csv\nprofile: tabular-data-resource\nquery: {}\nschema:\n  fields:\n    - name: id\n      type: string\n    - name: neighbor_id\n      type: string\n    - name: name\n      type: string\n    - name: population\n      type: string\nscheme: file\nstats:\n  bytes: 100\n  fields: 4\n  hash: 4204f087f328b70c854c03403ab448c4\n  rows: 5\n")),Object(o.b)("h3",{id:"infer-names"},"Infer Names"),Object(o.b)("p",null,"Sometimes you don't want to use existent header row to compose field names. It's possible to provide custom names:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},'from frictionless import describe\n\nresource = describe("data/country-1.csv", infer_names=["f1", "f2", "f3", "f4"])\nprint(resource.schema.field_names)\n')),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"['f1', 'f2', 'f3', 'f4']\n")),Object(o.b)("h3",{id:"infer-volume"},"Infer Volume"),Object(o.b)("p",null,"By default, Frictionless will use the first 100 rows to detect field types. This can be customized. The following code will be slower but the result can be more accurate"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},'from frictionless import describe\n\nresource = describe("data/country-1.csv", infer_volume=1000)\n')),Object(o.b)("h3",{id:"infer-confidence"},"Infer Confidence"),Object(o.b)("p",null,"By default, Frictionless uses 0.9 (90%) confidence level for data types detection. It means that it there are 9 integers in a field and one string it will be inferred as an integer. If you want a guarantee that an inferred schema will conform to the data you can set it to 1 (100%):"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},'from frictionless import describe\n\nresource = describe("data/country-1.csv", infer_confidence=1)\n')),Object(o.b)("h3",{id:"infer-missing-values"},"Infer Missing Values"),Object(o.b)("p",null,"Missing Values is an important concept in data description. It provides information about what cell values should be considered as nulls. We can customize the defaults:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},'from pprint import pprint\nfrom frictionless import describe\n\nresource = describe("data/country-1.csv", infer_missing_values=["", "67"])\npprint(resource.schema.missing_values)\npprint(resource.read_rows())\n')),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"['', '67']\n[Row([('id', 1),\n      ('neighbor_id', None),\n      ('name', 'Britain'),\n      ('population', None)]),\n Row([('id', 2), ('neighbor_id', 3), ('name', 'France'), ('population', None)]),\n Row([('id', 3), ('neighbor_id', 2), ('name', 'Germany'), ('population', 83)]),\n Row([('id', 4), ('neighbor_id', 5), ('name', 'Italy'), ('population', 60)]),\n Row([('id', 5), ('neighbor_id', 4), ('name', 'Spain'), ('population', 47)])]\n")),Object(o.b)("p",null,"As we can see, the textual values equal to \"67\" are now considered nulls. Usually, it's handy when you have data with values like: '-', 'n/a', and similar."))}u.isMDXComponent=!0}}]);