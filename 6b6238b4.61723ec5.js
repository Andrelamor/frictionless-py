(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{104:function(e,a,n){"use strict";n.r(a),n.d(a,"frontMatter",(function(){return o})),n.d(a,"metadata",(function(){return c})),n.d(a,"toc",(function(){return s})),n.d(a,"default",(function(){return p}));var t=n(3),r=n(7),i=(n(0),n(136)),o={title:"Extracting Data"},c={unversionedId:"guides/extracting-data",id:"guides/extracting-data",isDocsHomePage:!1,title:"Extracting Data",description:"Extracting data means reading tabular data from some source. We can use various customizations for this process such as providing a file format, table schema, limiting fields or rows amount, and much more. Let's see this with real files:",source:"@site/../docs/guides/extracting-data.md",slug:"/guides/extracting-data",permalink:"/docs/guides/extracting-data",editUrl:"https://github.com/frictionlessdata/frictionless-py/edit/master/docs/../docs/guides/extracting-data.md",version:"current",lastUpdatedBy:"roll",lastUpdatedAt:1612978440,sidebar:"guides",previous:{title:"Describing Data",permalink:"/docs/guides/describing-data"},next:{title:"Validating Data",permalink:"/docs/guides/validating-data"}},s=[{value:"Extract Functions",id:"extract-functions",children:[]},{value:"Extracting Resource",id:"extracting-resource",children:[]},{value:"Extracting Package",id:"extracting-package",children:[]},{value:"Resource Class",id:"resource-class",children:[]},{value:"Package Class",id:"package-class",children:[]},{value:"Header Class",id:"header-class",children:[]},{value:"Row Class",id:"row-class",children:[]}],l={toc:s};function p(e){var a=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(t.a)({},l,n,{components:a,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Extracting data means reading tabular data from some source. We can use various customizations for this process such as providing a file format, table schema, limiting fields or rows amount, and much more. Let's see this with real files:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},"$ cat data/country-3.csv\n")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-csv"},"id,capital_id,name,population\n1,1,Britain,67\n2,3,France,67\n3,2,Germany,83\n4,5,Italy,60\n5,4,Spain,47\n")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},"$ cat data/capital-3.csv\n")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-csv"},"id,name\n1,London\n2,Berlin\n3,Paris\n4,Madrid\n5,Rome\n")),Object(i.b)("p",null,"For a starter, we will use the command-line interface:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},"$ frictionless extract data/country-3.csv\n")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"---\ndata: data/country-3.csv\n---\n\n==  ==========  =======  ==========\nid  capital_id  name     population\n==  ==========  =======  ==========\n 1           1  Britain          67\n 2           3  France           67\n 3           2  Germany          83\n 4           5  Italy            60\n 5           4  Spain            47\n==  ==========  =======  ==========\n")),Object(i.b)("p",null,"The same can be done in Python:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"from pprint import pprint\nfrom frictionless import extract\n\nrows = extract('data/country-3.csv')\npprint(rows)\n")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"[Row([('id', 1), ('capital_id', 1), ('name', 'Britain'), ('population', 67)]),\n Row([('id', 2), ('capital_id', 3), ('name', 'France'), ('population', 67)]),\n Row([('id', 3), ('capital_id', 2), ('name', 'Germany'), ('population', 83)]),\n Row([('id', 4), ('capital_id', 5), ('name', 'Italy'), ('population', 60)]),\n Row([('id', 5), ('capital_id', 4), ('name', 'Spain'), ('population', 47)])]\n")),Object(i.b)("h2",{id:"extract-functions"},"Extract Functions"),Object(i.b)("p",null,"The high-level interface for extracting data provided by Frictionless is a set of ",Object(i.b)("inlineCode",{parentName:"p"},"extract")," functions:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"extract"),": it will detect the source type and extract data accordingly"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"extract_package"),": it accepts a package descriptor and returns a map of the package's tables"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"extract_resource"),": it accepts a resource descriptor and returns a table data")),Object(i.b)("p",null,"In command-line, there is only 1 command but there is a flag to adjust the behavior:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},"$ frictionless extract\n$ frictionless extract --type package\n$ frictionless extract --type resource\n")),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"extract")," functions always read data in a form of rows (see the object description below) into memory. The lower-level interfaces will allow you to stream data and various output forms."),Object(i.b)("h2",{id:"extracting-resource"},"Extracting Resource"),Object(i.b)("p",null,"A resource contains only one file and for extracting a resource we can use the same approach we used above but providing only one file. We will extract data using a metadata descriptor:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"from frictionless import extract\n\nrows = extract('data/capital-3.csv')\npprint(rows)\n")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"[Row([('id', 1), ('name', 'London')]),\n Row([('id', 2), ('name', 'Berlin')]),\n Row([('id', 3), ('name', 'Paris')]),\n Row([('id', 4), ('name', 'Madrid')]),\n Row([('id', 5), ('name', 'Rome')])]\n")),Object(i.b)("p",null,"Usually, the code above doesn't really make sense as we can just provide a path to the high-level ",Object(i.b)("inlineCode",{parentName:"p"},"extract")," function instead of a descriptor to the ",Object(i.b)("inlineCode",{parentName:"p"},"extract_resource")," function but the power of the descriptor is that it can contain different metadata and be stored on the disc. Let's extend our example:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"from frictionless import Resource\n\nresource = Resource('data/capital-3.csv')\nresource.schema.missing_values.append('3')\nresource.to_yaml('tmp/capital.resource.yaml')\n")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},"$ frictionless extract tmp/capital.resource.yaml --basepath .\n")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"---\ndata: tmp/capital.resource.yaml\n---\n\n====  ======\nid    name\n====  ======\n   1  London\n   2  Berlin\nNone  Paris\n   4  Madrid\n   5  Rome\n====  ======\n")),Object(i.b)("p",null,"So what's happened? We set textual representation of the number \"3\" to be a missing value. It was done only for the presentational purpose because it's definitely not a missing value. On the other hand, it demonstrated how metadata can be used."),Object(i.b)("h2",{id:"extracting-package"},"Extracting Package"),Object(i.b)("p",null,"Let's start by using the command line-interface. We're going to provide two files to the ",Object(i.b)("inlineCode",{parentName:"p"},"extract")," command which will be enough to detect that it's a dataset:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},"$ frictionless extract data/*-3.csv\n")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"---\ndata: data/capital-3.csv\n---\n\n==  ======\nid  name\n==  ======\n 1  London\n 2  Berlin\n 3  Paris\n 4  Madrid\n 5  Rome\n==  ======\n\n---\ndata: data/country-3.csv\n---\n\n==  ==========  =======  ==========\nid  capital_id  name     population\n==  ==========  =======  ==========\n 1           1  Britain          67\n 2           3  France           67\n 3           2  Germany          83\n 4           5  Italy            60\n 5           4  Spain            47\n==  ==========  =======  ==========\n")),Object(i.b)("p",null,"In Python we can do the same by providing a glob for the ",Object(i.b)("inlineCode",{parentName:"p"},"extract")," function, but instead we will use ",Object(i.b)("inlineCode",{parentName:"p"},"extract_package")," by providing a package descriptor:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"from frictionless import extract\n\ndata = extract('data/*-3.csv)\nfor path, rows in data.items():\n  pprint(path)\n  pprint(rows)\n")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"'data/country-3.csv'\n[Row([('id', 1), ('capital_id', 1), ('name', 'Britain'), ('population', 67)]),\n Row([('id', 2), ('capital_id', 3), ('name', 'France'), ('population', 67)]),\n Row([('id', 3), ('capital_id', 2), ('name', 'Germany'), ('population', 83)]),\n Row([('id', 4), ('capital_id', 5), ('name', 'Italy'), ('population', 60)]),\n Row([('id', 5), ('capital_id', 4), ('name', 'Spain'), ('population', 47)])]\n'data/capital-3.csv'\n[Row([('id', 1), ('name', 'London')]),\n Row([('id', 2), ('name', 'Berlin')]),\n Row([('id', 3), ('name', 'Paris')]),\n Row([('id', 4), ('name', 'Madrid')]),\n Row([('id', 5), ('name', 'Rome')])]\n")),Object(i.b)("h2",{id:"resource-class"},"Resource Class"),Object(i.b)("p",null,"The Resource class is also a metadata class which provides various read and stream functions. The ",Object(i.b)("inlineCode",{parentName:"p"},"extract")," functions always read rows into memory; Resource can do the same but it also gives a choice regarding output data. It can be ",Object(i.b)("inlineCode",{parentName:"p"},"rows"),", ",Object(i.b)("inlineCode",{parentName:"p"},"data"),", ",Object(i.b)("inlineCode",{parentName:"p"},"text"),", or ",Object(i.b)("inlineCode",{parentName:"p"},"bytes"),". Let's try reading all of them:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"from frictionless import Resource\n\nresource = Resource('data/country-3.csv')\npprint(resource.read_bytes())\npprint(resource.read_text())\npprint(resource.read_lists())\npprint(resource.read_rows())\n")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"(b'id,capital_id,name,population\\n1,1,Britain,67\\n2,3,France,67\\n3,2,Germany,8'\n b'3\\n4,5,Italy,60\\n5,4,Spain,47\\n')\n('id,capital_id,name,population\\n'\n '1,1,Britain,67\\n'\n '2,3,France,67\\n'\n '3,2,Germany,83\\n'\n '4,5,Italy,60\\n'\n '5,4,Spain,47\\n')\n[['id', 'capital_id', 'name', 'population'],\n ['1', '1', 'Britain', '67'],\n ['2', '3', 'France', '67'],\n ['3', '2', 'Germany', '83'],\n ['4', '5', 'Italy', '60'],\n ['5', '4', 'Spain', '47']]\n[Row([('id', 1), ('capital_id', 1), ('name', 'Britain'), ('population', 67)]),\n Row([('id', 2), ('capital_id', 3), ('name', 'France'), ('population', 67)]),\n Row([('id', 3), ('capital_id', 2), ('name', 'Germany'), ('population', 83)]),\n Row([('id', 4), ('capital_id', 5), ('name', 'Italy'), ('population', 60)]),\n Row([('id', 5), ('capital_id', 4), ('name', 'Spain'), ('population', 47)])]\n")),Object(i.b)("p",null,"It's really handy to read all your data into memory but it's not always possible as a file can be really big. For such cases, Frictionless provides streaming functions:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"from frictionless import Resource\n\nwith Resource('data/country-3.csv') as resource:\n    pprint(resource.byte_stream)\n    pprint(resource.text_stream)\n    pprint(resource.data_stream)\n    pprint(resource.row_stream)\n    for row in resource.row_stream:\n      print(row)\n")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"<frictionless.loader.ByteStreamWithStatsHandling object at 0x7fe7e3664910>\n<_io.TextIOWrapper name='./data/country-3.csv' encoding='utf-8'>\n<generator object Resource.read_data_stream at 0x7fe7e3c93a50>\n<generator object Resource.read_row_stream at 0x7fe7e3c93a50>\nRow([('id', 1), ('capital_id', 1), ('name', 'Britain'), ('population', 67)])\nRow([('id', 2), ('capital_id', 3), ('name', 'France'), ('population', 67)])\nRow([('id', 3), ('capital_id', 2), ('name', 'Germany'), ('population', 83)])\nRow([('id', 4), ('capital_id', 5), ('name', 'Italy'), ('population', 60)])\nRow([('id', 5), ('capital_id', 4), ('name', 'Spain'), ('population', 47)])\n")),Object(i.b)("h2",{id:"package-class"},"Package Class"),Object(i.b)("p",null,"The Package class is a metadata class which provides an ability to read its contents. First of all, let's create a package descriptor:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},"$ frictionless describe data/*-3.csv --json > tmp/country.package.json\n")),Object(i.b)("p",null,"Now, we can open the created descriptor and read the package's resources:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"from frictionless import Package\n\npackage = Package('data/*-3.csv')\npprint(package.get_resource('country-3').read_rows())\npprint(package.get_resource('capital-3').read_rows())\n")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"[Row([('id', 1), ('capital_id', 1), ('name', 'Britain'), ('population', 67)]),\n Row([('id', 2), ('capital_id', 3), ('name', 'France'), ('population', 67)]),\n Row([('id', 3), ('capital_id', 2), ('name', 'Germany'), ('population', 83)]),\n Row([('id', 4), ('capital_id', 5), ('name', 'Italy'), ('population', 60)]),\n Row([('id', 5), ('capital_id', 4), ('name', 'Spain'), ('population', 47)])]\n[Row([('id', 1), ('name', 'London')]),\n Row([('id', 2), ('name', 'Berlin')]),\n Row([('id', 3), ('name', 'Paris')]),\n Row([('id', 4), ('name', 'Madrid')]),\n Row([('id', 5), ('name', 'Rome')])]\n")),Object(i.b)("p",null,"The package by itself doesn't provide any read functions directly as it's a role of its resources. So everything written below for the Resource class can be used within a package."),Object(i.b)("h2",{id:"header-class"},"Header Class"),Object(i.b)("p",null,"After opening a resource you get access to a ",Object(i.b)("inlineCode",{parentName:"p"},"resource.header")," object. It's a list of normalized labels but providing some additional functionality. Let's take a look:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"from frictionless import Resource\n\nwith Resource('data/capital-3.csv') as resource:\n  print(f'Header: {resource.header}')\n  print(f'Labels: {resource.header.labels}')\n  print(f'Fields: {resource.header.fields}')\n  print(f'Field Names: {resource.header.field_names}')\n  print(f'Field Positions: {resource.header.field_positions}')\n  print(f'Errors: {resource.header.errors}')\n  print(f'Valid: {resource.header.valid}')\n  print(f'As List: {resource.header.to_list()}')\n")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"Header: ['id', 'name']\nLabels: ['id', 'name']\nFields: [{'name': 'id', 'type': 'integer'}, {'name': 'name', 'type': 'string'}]\nField Names: ['id', 'name']\nField Positions: [1, 2]\nErrors: []\nValid: True\nAs List: ['id', 'name']\n")),Object(i.b)("p",null,'The example above covers the case when a header is valid. For a header with tabular errors this information can be much more useful revealing discrepancies, duplicates or missing cells information. Please read "API Reference" for more details.'),Object(i.b)("h2",{id:"row-class"},"Row Class"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"extract"),", ",Object(i.b)("inlineCode",{parentName:"p"},"resource.read_rows()")," and many other functions return or yield row objects. It's a ",Object(i.b)("inlineCode",{parentName:"p"},"dict")," providing additional API shown below:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"from frictionless import Resource, Detector\n\ndetector = Detector(schema_patch={'missingValues': ['1']})\nwith Resource('data/capital-3.csv', detector=detector) as resource:\n  for row in resource:\n    print(f'Row: {row}')\n    print(f'Cells: {row.cells}')\n    print(f'Fields: {row.fields}')\n    print(f'Field Names: {row.field_names}')\n    print(f'Field Positions: {row.field_positions}')\n    print(f'Row Position: {row.row_position}') # physical line number starting from 1\n    print(f'Row Number: {row.row_number}') # counted row number starting from 1\n    print(f'Blank Cells: {row.blank_cells}')\n    print(f'Error Cells: {row.error_cells}')\n    print(f'Errors: {row.errors}')\n    print(f'Valid: {row.valid}')\n    print(f'As Dict: {row.to_dict(json=False)}')\n    print(f'As List: {row.to_list(json=True)}') # JSON compatible data types\n    break\n")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"Row: Row([('id', None), ('name', 'London')])\nCells: ['1', 'londong']\nFields: [{'name': 'id', 'type': 'integer'}, {'name': 'name', 'type': 'string'}]\nField Names: ['id', 'name']\nField Positions: [1, 2]\nRow Position: 2\nRow Number: 1\nBlank Cells: {'id': '1'}\nError Cells: {}\nErrors: []\nValid: True\nAs Dict: {'id': None, 'name': 'London'}\nAs List: [None, 'London']\n")),Object(i.b)("p",null,'As we can see, it provides a lot of information which is especially useful when a row is not valid. Our row is valid but we demonstrated how it can preserve data about raw missing values. It also preserves data about all errored cells. Please read "API Reference" for more details.'))}p.isMDXComponent=!0},136:function(e,a,n){"use strict";n.d(a,"a",(function(){return d})),n.d(a,"b",(function(){return m}));var t=n(0),r=n.n(t);function i(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function o(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function c(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?o(Object(n),!0).forEach((function(a){i(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function s(e,a){if(null==e)return{};var n,t,r=function(e,a){if(null==e)return{};var n,t,r={},i=Object.keys(e);for(t=0;t<i.length;t++)n=i[t],a.indexOf(n)>=0||(r[n]=e[n]);return r}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)n=i[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=r.a.createContext({}),p=function(e){var a=r.a.useContext(l),n=a;return e&&(n="function"==typeof e?e(a):c(c({},a),e)),n},d=function(e){var a=p(e.components);return r.a.createElement(l.Provider,{value:a},e.children)},u={inlineCode:"code",wrapper:function(e){var a=e.children;return r.a.createElement(r.a.Fragment,{},a)}},b=r.a.forwardRef((function(e,a){var n=e.components,t=e.mdxType,i=e.originalType,o=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=p(n),b=t,m=d["".concat(o,".").concat(b)]||d[b]||u[b]||i;return n?r.a.createElement(m,c(c({ref:a},l),{},{components:n})):r.a.createElement(m,c({ref:a},l))}));function m(e,a){var n=arguments,t=a&&a.mdxType;if("string"==typeof e||t){var i=n.length,o=new Array(i);o[0]=b;var c={};for(var s in a)hasOwnProperty.call(a,s)&&(c[s]=a[s]);c.originalType=e,c.mdxType="string"==typeof e?e:t,o[1]=c;for(var l=2;l<i;l++)o[l]=n[l];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"}}]);