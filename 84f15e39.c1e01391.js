(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{117:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return o})),a.d(t,"metadata",(function(){return l})),a.d(t,"toc",(function(){return s})),a.d(t,"default",(function(){return d}));var n=a(3),i=a(7),r=(a(0),a(157)),o={title:"Validation Guide"},l={unversionedId:"guides/validation-guide",id:"guides/validation-guide",isDocsHomePage:!1,title:"Validation Guide",description:"Tabular data validation is a process of identifying tabular problems that have place in your data for further correction. Let's explore how Frictionless helps to achieve these tasks using an invalid data table example:",source:"@site/../docs/guides/validation-guide.md",slug:"/guides/validation-guide",permalink:"/docs/guides/validation-guide",editUrl:"https://github.com/frictionlessdata/frictionless-py/edit/master/docs/../docs/guides/validation-guide.md",version:"current",lastUpdatedBy:"roll",lastUpdatedAt:1613637817,sidebar:"guides",previous:{title:"Extracting Data",permalink:"/docs/guides/extracting-data"},next:{title:"Validation Checks",permalink:"/docs/guides/validation-checks"}},s=[{value:"Validate Functions",id:"validate-functions",children:[]},{value:"Validating Schema",id:"validating-schema",children:[]},{value:"Validating Resource",id:"validating-resource",children:[]},{value:"Validating Package",id:"validating-package",children:[]},{value:"Validating Inquiry",id:"validating-inquiry",children:[]},{value:"Validation Report",id:"validation-report",children:[]},{value:"Validation Errors",id:"validation-errors",children:[]},{value:"Available Checks",id:"available-checks",children:[]},{value:"Custom Checks",id:"custom-checks",children:[]},{value:"Pick/Skip Errors",id:"pickskip-errors",children:[]},{value:"Limit Errors",id:"limit-errors",children:[]},{value:"Limit Memory",id:"limit-memory",children:[]}],c={toc:s};function d(e){var t=e.components,a=Object(i.a)(e,["components"]);return Object(r.b)("wrapper",Object(n.a)({},c,a,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"Tabular data validation is a process of identifying tabular problems that have place in your data for further correction. Let's explore how Frictionless helps to achieve these tasks using an invalid data table example:"),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"Download ",Object(r.b)("a",{parentName:"p",href:"https://raw.githubusercontent.com/frictionlessdata/frictionless-py/master/data/capital-invalid.csv"},Object(r.b)("inlineCode",{parentName:"a"},"capital-invalid.csv"))," and put into the ",Object(r.b)("inlineCode",{parentName:"p"},"data")," folder to reproduce the examples")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-bash",metastring:'title="CLI"',title:'"CLI"'},"cat data/capital-invalid.csv\n")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-csv",metastring:'title="data/capital-valid.csv"',title:'"data/capital-valid.csv"'},"id,name,name\n1,London,Britain\n2,Berlin,Germany\n3,Paris,France\n4,Madrid,Spain\n5,Rome,Italy\n6,Zagreb,Croatia\n7,Athens,Greece\n8,Vienna,Austria\n8,Warsaw\n\nx,Tokio,Japan,review\n")),Object(r.b)("p",null,"Using the command-line interface we can validate this file. Frictionless provides comprehensive error details so it's self-explanatory. Continue reading to learn the validation process in-details."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-bash",metastring:'title="CLI"',title:'"CLI"'},"frictionless validate data/capital-invalid.csv\n")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},'---\ninvalid: data/capital-invalid.csv\n---\n\n====  =====  ================  ====================================================================================================================\nrow   field  code              message\n====  =====  ================  ====================================================================================================================\nNone      3  duplicate-header  Header "name" in field at position "3" is duplicated to header in another field: at position "2"\n  10      3  missing-cell      Row at position "10" has a missing cell in field "name2" at position "3"\n  11  None   blank-row         Row at position "11" is completely blank\n  12      4  extra-cell        Row at position "12" has an extra value in field at position "4"\n  12      1  type-error        The cell "x" in row at position "12" and field "id" at position "1" has incompatible type: type is "integer/default"\n====  =====  ================  ====================================================================================================================\n')),Object(r.b)("h2",{id:"validate-functions"},"Validate Functions"),Object(r.b)("p",null,"The high-level interface for validating data provided by Frictionless is a set of ",Object(r.b)("inlineCode",{parentName:"p"},"validate")," functions:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"validate"),": it will detect the source type and validate data accordingly"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"validate_schema"),": it validates a schema's metadata"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"validate_resource"),": it validates a resource's data and metadata"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"validate_package"),": it validates a package's data and metadata"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"validate_inquiery"),": it validates a special ",Object(r.b)("inlineCode",{parentName:"li"},"Inquiery")," object which represents a validation task instruction"),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"validate_table"),": it validates a table")),Object(r.b)("p",null,"In command-line, there is only 1 command but there is a flag to adjust the behavior:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-bash",metastring:'title="CLI"',title:'"CLI"'},"frictionless validate\nfrictionless validate --source-type schema\nfrictionless validate --source-type resource\nfrictionless validate --source-type package\nfrictionless validate --source-type inquiry\nfrictionless validate --source-type table\n")),Object(r.b)("h2",{id:"validating-schema"},"Validating Schema"),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"validate_schema")," function is the only function validating solely metadata. Let's create a invalid table schema:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python",metastring:'title="Python"',title:'"Python"'},"from frictionless import Schema\n\nschema = Schema()\nschema.fields = {} # must be a list\nschema.to_yaml('tmp/invalid.schema.yaml')\n")),Object(r.b)("p",null,"And validate it using the command-line interface:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-bash",metastring:'title="CLI"',title:'"CLI"'},"frictionless validate tmp/invalid.schema.yaml\n")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},'---\ninvalid: tmp/invalid.schema.yaml\n---\n============  ===============================================================================================================================================================================\ncode          message\n============  ===============================================================================================================================================================================\nschema-error  The data source could not be successfully described by the invalid Table Schema: "{} is not of type \'array\'" at "fields" in metadata and at "properties/fields/type" in profile\n============  ===============================================================================================================================================================================\n')),Object(r.b)("p",null,"Schema validation can be very useful when you work with different classes of tables and create schemas for them. Using this function you can ensure that the metadata is valid."),Object(r.b)("h2",{id:"validating-resource"},"Validating Resource"),Object(r.b)("p",null,'As it was shown in the "Describing Data" guide a resource is a container having both metadata and data. We need to create a resource descriptor to validate it:'),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-bash",metastring:'title="CLI"',title:'"CLI"'},"frictionless describe data/capital-invalid.csv --json > tmp/capital.resource.json\n")),Object(r.b)("p",null,"Let's now use the command-line interface to ensure that we are getting the same result as we had without using a resource:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-bash",metastring:'title="CLI"',title:'"CLI"'},"frictionless validate tmp/capital.resource.json --basepath .\n")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},'---\ninvalid: ./data/capital-invalid.csv\n---\n\n====  =====  ================  ====================================================================================================================\nrow   field  code              message\n====  =====  ================  ====================================================================================================================\nNone      3  duplicate-header  Header "name" in field at position "3" is duplicated to header in another field: at position "2"\n  10      3  missing-cell      Row at position "10" has a missing cell in field "name2" at position "3"\n  11  None   blank-row         Row at position "11" is completely blank\n  12      4  extra-cell        Row at position "12" has an extra value in field at position "4"\n  12      1  type-error        The cell "x" in row at position "12" and field "id" at position "1" has incompatible type: type is "integer/default"\n====  =====  ================  ====================================================================================================================\n')),Object(r.b)("p",null,"Okay, why do we need to use a resource descriptor if the result is the same? The reason is metadata + data packaging. Let's extend our resource descriptor:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python",metastring:'title="Python"',title:'"Python"'},"from frictionless import describe\n\nresource = describe('data/capital-invalid.csv')\nresource['bytes'] = 100 # wrong\nresource['hash'] = 'ae23c74693ca2d3f0e38b9ba3570775b' # wrong\nresource.to_yaml('tmp/capital.resource.yaml')\n")),Object(r.b)("p",null,"We have added a few bad metrics to our resource descriptor. The validation below reports it in addition to all the errors we had before. This example is showing how concepts like Data Resource can be extremely useful when working with data."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-bash",metastring:'title="CLI"',title:'"CLI"'},"frictionless validate tmp/capital.resource.yaml --basepath .\n")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},'---\ninvalid: ./data/capital-invalid.csv\n---\n\n====  =====  ================  ====================================================================================================================\nrow   field  code              message\n====  =====  ================  ====================================================================================================================\nNone      3  duplicate-header  Header "name" in field at position "3" is duplicated to header in another field: at position "2"\n  10      3  missing-cell      Row at position "10" has a missing cell in field "name2" at position "3"\n  11  None   blank-row         Row at position "11" is completely blank\n  12      4  extra-cell        Row at position "12" has an extra value in field at position "4"\n  12      1  type-error        The cell "x" in row at position "12" and field "id" at position "1" has incompatible type: type is "integer/default"\n====  =====  ================  ====================================================================================================================\n')),Object(r.b)("h2",{id:"validating-package"},"Validating Package"),Object(r.b)("p",null,"A package is a set of resources + additional metadata. To showcase a package validation we need one more tabular file:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-bash",metastring:'title="CLI"',title:'"CLI"'},"cat data/capital-valid.csv\n")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-csv",metastring:'title="data/capital-valid.csv"',title:'"data/capital-valid.csv"'},"id,name\n1,London\n2,Berlin\n3,Paris\n4,Madrid\n5,Rome\n")),Object(r.b)("p",null,"Let's describe and validate a package:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-bash",metastring:'title="CLI"',title:'"CLI"'},"frictionless describe data/capital-*id.csv --json > tmp/capital.package.json\nfrictionless validate tmp/capital.package.json --basepath .\n")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},'---\ninvalid: ./data/capital-invalid.csv\n---\n\n====  =====  ================  ====================================================================================================================\nrow   field  code              message\n====  =====  ================  ====================================================================================================================\nNone      3  duplicate-header  Header "name" in field at position "3" is duplicated to header in another field: at position "2"\n  10      3  missing-cell      Row at position "10" has a missing cell in field "name2" at position "3"\n  11  None   blank-row         Row at position "11" is completely blank\n  12      4  extra-cell        Row at position "12" has an extra value in field at position "4"\n  12      1  type-error        The cell "x" in row at position "12" and field "id" at position "1" has incompatible type: type is "integer/default"\n====  =====  ================  ====================================================================================================================\n\n\n---\nvalid: ./data/capital-valid.csv\n---\n')),Object(r.b)("p",null,"As we can see, the result is pretty straight-forward and expected: we have one invalid resource and one valid. One important note regarding the package validation: if there are more than one resource, it will use multiprocessing to speed up the process"),Object(r.b)("h2",{id:"validating-inquiry"},"Validating Inquiry"),Object(r.b)("p",null,"The Inquiry gives you an ability to create arbitrary validation jobs containing a set of individual validation tasks. Let's create an inquiry that includes an individual file validation and a resource validation:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python",metastring:'title="Python"',title:'"Python"'},"from frictionless import Inquiry\n\ninquiry = Inquiry({'tasks': [\n  {'source': 'data/capital-valid.csv'},\n  {'source': 'tmp/capital.resource.json', 'basepath': '.'},\n]})\ninquiry.to_yaml('tmp/capital.inquiry.yaml')\n")),Object(r.b)("p",null,"Tasks in the Inquiry accept the same arguments written in camelCase as the corresponding ",Object(r.b)("inlineCode",{parentName:"p"},"validate")," functions have. As usual, let' run validation:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-bash",metastring:'title="CLI"',title:'"CLI"'},"frictionless validate tmp/capital.inquiry.yaml\n")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},'---\nvalid: data/capital-valid.csv\n---\n---\ninvalid: ./data/capital-invalid.csv\n---\n\n====  =====  ================  ====================================================================================================================\nrow   field  code              message\n====  =====  ================  ====================================================================================================================\nNone      3  duplicate-header  Header "name" in field at position "3" is duplicated to header in another field: at position "2"\n  10      3  missing-cell      Row at position "10" has a missing cell in field "name2" at position "3"\n  11  None   blank-row         Row at position "11" is completely blank\n  12      4  extra-cell        Row at position "12" has an extra value in field at position "4"\n  12      1  type-error        The cell "x" in row at position "12" and field "id" at position "1" has incompatible type: type is "integer/default"\n====  =====  ================  ====================================================================================================================\n')),Object(r.b)("p",null,"At first sight, it's no clear why such a construct exists but when your validation workflow gets complex, the Inquiry can provide a lot of flexibility and power. Last but not least, the Inquiry will use multiprocessing if there are more than 1 task provided."),Object(r.b)("h2",{id:"validation-report"},"Validation Report"),Object(r.b)("p",null,"All the ",Object(r.b)("inlineCode",{parentName:"p"},"validate")," functions return the Validation Report. It's an unified object containing information about a validation: source details, found error, etc. Let's explore a report:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python",metastring:'title="Python"',title:'"Python"'},"from pprint import pprint\nfrom frictionless import validate\n\nreport = validate('data/capital-invalid.csv', pick_errors=['duplicate-header'])\npprint(report)\n")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},"{'errors': [],\n 'stats': {'errors': 1, 'tables': 1},\n 'tables': [{'compression': 'no',\n             'compressionPath': '',\n             'dialect': {},\n             'encoding': 'utf-8',\n             'errors': [{'cell': 'name',\n                         'cells': ['id', 'name', 'name'],\n                         'code': 'duplicate-header',\n                         'description': 'Two columns in the header row have '\n                                        'the same value. Column names should '\n                                        'be unique.',\n                         'fieldName': 'name2',\n                         'fieldNumber': 3,\n                         'fieldPosition': 3,\n                         'message': 'Header \"name\" in field at position \"3\" is '\n                                    'duplicated to header in another field: at '\n                                    'position \"2\"',\n                         'name': 'Duplicate Header',\n                         'note': 'at position \"2\"',\n                         'tags': ['#head', '#structure']}],\n             'format': 'csv',\n             'hashing': 'md5',\n             'header': ['id', 'name', 'name'],\n             'partial': False,\n             'path': 'data/capital-invalid.csv',\n             'query': {},\n             'schema': {'fields': [{'name': 'id', 'type': 'integer'},\n                                   {'name': 'name', 'type': 'string'},\n                                   {'name': 'name2', 'type': 'string'}]},\n             'scheme': 'file',\n             'scope': ['duplicate-header'],\n             'stats': {'bytes': 171,\n                       'errors': 1,\n                       'fields': 3,\n                       'hash': 'dcdeae358cfd50860c18d953e021f836',\n                       'rows': 11},\n             'time': 0.019,\n             'valid': False}],\n 'time': 0.019,\n 'valid': False,\n 'version': '3.38.1'}\n")),Object(r.b)("p",null,'As we can see, there are a lot of information; you can find its details description in "API Reference". Errors are grouped by tables; for some validation there are can be dozens of tables. Let\'s use the ',Object(r.b)("inlineCode",{parentName:"p"},"report.flatten")," function to simplify errors representation:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python",metastring:'title="Python"',title:'"Python"'},"from frictionless import validate\n\nreport = validate('data/capital-invalid.csv', pick_errors=['duplicate-header'])\npprint(report.flatten(['rowPosition', 'fieldPosition', 'code', 'message']))\n")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},"[[None,\n  3,\n  'duplicate-header',\n  'Header \"name\" in field at position \"3\" is duplicated to header in another '\n  'field: at position \"2\"']]\n")),Object(r.b)("p",null,"In some situation, an error can't be associated with a table; then it goes to the top-level ",Object(r.b)("inlineCode",{parentName:"p"},"report.errors")," property:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python",metastring:'title="Python"',title:'"Python"'},"from frictionless import validate_schema\n\nreport = validate_schema('bad.json')\npprint(report)\n")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},"{'errors': [{'code': 'schema-error',\n             'description': 'Provided schema is not valid.',\n             'message': 'The data source could not be successfully described '\n                        'by the invalid Table Schema: cannot extract metadata '\n                        '\"bad.json\" because \"[Errno 2] No such file or '\n                        'directory: \\'bad.json\\'\"',\n             'name': 'Schema Error',\n             'note': 'cannot extract metadata \"bad.json\" because \"[Errno 2] No '\n                     'such file or directory: \\'bad.json\\'\"',\n             'tags': ['#table', '#schema']}],\n 'stats': {'errors': 1, 'tables': 0},\n 'tables': [],\n 'time': 0.0,\n 'valid': False,\n 'version': '3.38.1'}\n")),Object(r.b)("h2",{id:"validation-errors"},"Validation Errors"),Object(r.b)("p",null,"The Error object is at the heart of the validation process. The Report has ",Object(r.b)("inlineCode",{parentName:"p"},"report.errors")," and ",Object(r.b)("inlineCode",{parentName:"p"},"report.tables[].errors")," properties that can contain the Error object. Let's explore it:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python",metastring:'title="Python"',title:'"Python"'},"from frictionless import validate\n\nreport = validate('data/capital-invalid.csv', pick_errors=['duplicate-header'])\nerror = report.table.error # it's only available for 1 table / 1 error sitution\nprint(f'Code: \"{error.code}\"')\nprint(f'Name: \"{error.name}\"')\nprint(f'Tags: \"{error.tags}\"')\nprint(f'Note: \"{error.note}\"')\nprint(f'Message: \"{error.message}\"')\nprint(f'Description: \"{error.description}\"')\n")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},'Code: "duplicate-header"\nName: "Duplicate Header"\nTags: "[\'#head\', \'#structure\']"\nNote: "at position "2""\nMessage: "Header "name" in field at position "3" is duplicated to header in another field: at position "2""\nDescription: "Two columns in the header row have the same value. Column names should be unique."\n')),Object(r.b)("p",null,"Above, we have listed universal error properties. Depending on the type of an error there can be additional ones. For example, for our ",Object(r.b)("inlineCode",{parentName:"p"},"duplicate-header")," error:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python",metastring:'title="Python"',title:'"Python"'},"from frictionless import validate\n\nreport = validate('data/capital-invalid.csv', pick_errors=['duplicate-header'])\nerror = report.table.error # it's only available for 1 table / 1 error sitution\npprint(error)\n")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},"{'cell': 'name',\n 'cells': ['id', 'name', 'name'],\n 'code': 'duplicate-header',\n 'description': 'Two columns in the header row have the same value. Column '\n                'names should be unique.',\n 'fieldName': 'name2',\n 'fieldNumber': 3,\n 'fieldPosition': 3,\n 'message': 'Header \"name\" in field at position \"3\" is duplicated to header in '\n            'another field: at position \"2\"',\n 'name': 'Duplicate Header',\n 'note': 'at position \"2\"',\n 'tags': ['#head', '#structure']}\n")),Object(r.b)("p",null,'Please explore "Errors Reference" to learn about all the available errors and their properties.'),Object(r.b)("h2",{id:"available-checks"},"Available Checks"),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"Note that only the Baseline Check in enabled by default. Other builtin checks need to be activated as it's shown below")),Object(r.b)("p",null,"There are various validation checks included in the core Frictionless Framework along with an ability to create custom checks. You can provide a list of checks where individual checks are in the form of:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"a dict: ",Object(r.b)("inlineCode",{parentName:"li"},"{'code': 'code', 'option1': 'value1'}")),Object(r.b)("li",{parentName:"ul"},"an object: ",Object(r.b)("inlineCode",{parentName:"li"},"checks.code(option1='value1')"))),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python",metastring:'title="Python"',title:'"Python"'},'from frictionless import validate, checks\n\nchecks = [checks.sequential_value(field_name=\'id\')]\nreport = validate(\'data/capital-invalid.csv\', checks=checks)\npprint(report.flatten(["rowPosition", "fieldPosition", "code", "note"]))\n')),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},"[[None, 3, 'duplicate-header', 'at position \"2\"'],\n [10, 3, 'missing-cell', ''],\n [10, 1, 'sequential-value', 'the value is not sequential'],\n [11, None, 'blank-row', ''],\n [12, 4, 'extra-cell', ''],\n [12, 1, 'type-error', 'type is \"integer/default\"']]\n")),Object(r.b)("p",null,"See ",Object(r.b)("a",{parentName:"p",href:"/docs/guides/validation-checks"},"Validation Checks")," for a list of available checks."),Object(r.b)("h2",{id:"custom-checks"},"Custom Checks"),Object(r.b)("p",null,"There are many cases when built-in Frictionless' checks are not enough. It can be a business logic rule or specific quality requirement to the data. With Frictionless it's very easy to use your own custom checks. Let's see on an example:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python",metastring:'title="Python"',title:'"Python"'},"from pprint import pprint\nfrom frictionless import validate, errors, Check\n\n# Create check\ndef forbidden_two(row):\n    if row['header'] == 2:\n      note = f\"number {self['number']} is forbidden!\"\n      yield errors.CellError.from_row(row, note=note, field_name='header')\n\n# Validate table\nsource = b'header\\n1\\n2\\n3'\nreport = validate(source,  format='csv', checks=[forbidden_two])\npprint(report.flatten([\"rowPosition\", \"fieldPosition\", \"code\", \"note\"]))\n")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},"[[3, 1, 'cell-error', 'number 2 is forbidden!']]\n")),Object(r.b)("p",null,"Usually, it also makes sense to create a custom error for your custom check. The Check class provides other useful methods like ",Object(r.b)("inlineCode",{parentName:"p"},"validate_header"),' etc. Please read "API Reference" to learn it in details.'),Object(r.b)("p",null,"Learn more about custom checks in the ",Object(r.b)("a",{parentName:"p",href:"/docs/guides/extension/check-guide"},"Check Guide"),"."),Object(r.b)("h2",{id:"pickskip-errors"},"Pick/Skip Errors"),Object(r.b)("p",null,"We can pick or skip errors providing a list of error codes. For example:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python",metastring:'title="Python"',title:'"Python"'},"from frictionless import validate\n\nreport1 = validate('data/capital-invalid.csv', pick_errors=['duplicate-header'])\nreport2 = validate('data/capital-invalid.csv', skip_errors=['duplicate-header'])\npprint(report1.flatten(['rowPosition', 'fieldPosition', 'code']))\npprint(report2.flatten(['rowPosition', 'fieldPosition', 'code']))\n")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},"[[None, 3, 'duplicate-header']]\n[[10, 3, 'missing-cell'],\n [11, None, 'blank-row'],\n [12, 4, 'extra-cell'],\n [12, 1, 'type-error']]\n")),Object(r.b)("p",null,'It\'s also possible to use error tags (for more information please consult with "Errors Reference"):'),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python",metastring:'title="Python"',title:'"Python"'},"from frictionless import validate\n\nreport1 = validate('data/capital-invalid.csv', pick_errors=['#head'])\nreport2 = validate('data/capital-invalid.csv', skip_errors=['#body'])\npprint(report1.flatten(['rowPosition', 'fieldPosition', 'code']))\npprint(report2.flatten(['rowPosition', 'fieldPosition', 'code']))\n")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},"[[None, 3, 'duplicate-header']]\n[[None, 3, 'duplicate-header']]\n")),Object(r.b)("h2",{id:"limit-errors"},"Limit Errors"),Object(r.b)("p",null,'This option is self-explanatory and can be used when you need to "fail fast" or get a limited amount of errors:'),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python",metastring:'title="Python"',title:'"Python"'},"from frictionless import validate\n\nreport = validate('data/capital-invalid.csv', limit_errors=1)\npprint(report.flatten(['rowPosition', 'fieldPosition', 'code']))\n")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},"[[None, 3, 'duplicate-header']]\n")),Object(r.b)("h2",{id:"limit-memory"},"Limit Memory"),Object(r.b)("p",null,"Frictionless is a streaming engine; usually it's possible to validate terrabytes of data with basically O(1) memory consumption. For some validation, it's not the case because Frctionless needs to buffer some cells e.g. to checks uniqueness. Here memory management can be handy."),Object(r.b)("p",null,"Default memory limit is 1000MB. You can adjust it based on your exact use case. For example, if you're running Frictionless as an API server you might reduce the memory usage. If a validation hits the limit it will not raise of fail - it will return a report with a task error:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python",metastring:'title="Python"',title:'"Python"'},'from frictionless import validate\n\nsource = lambda: ([integer] for integer in range(1, 100000000))\nschema = {"fields": [{"name": "integer", "type": "integer"}], "primaryKey": "integer"}\nreport = validate(source, headers=False, schema=schema, limit_memory=50)\nprint(report.flatten(["code", "note"]))\n# [[\'task-error\', \'exceeded memory limit "50MB"\']]\n')))}d.isMDXComponent=!0},157:function(e,t,a){"use strict";a.d(t,"a",(function(){return p})),a.d(t,"b",(function(){return m}));var n=a(0),i=a.n(n);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var c=i.a.createContext({}),d=function(e){var t=i.a.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},p=function(e){var t=d(e.components);return i.a.createElement(c.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},u=i.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,r=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=d(a),u=n,m=p["".concat(o,".").concat(u)]||p[u]||b[u]||r;return a?i.a.createElement(m,l(l({ref:t},c),{},{components:a})):i.a.createElement(m,l({ref:t},c))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=a.length,o=new Array(r);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:n,o[1]=l;for(var c=2;c<r;c++)o[c]=a[c];return i.a.createElement.apply(null,o)}return i.a.createElement.apply(null,a)}u.displayName="MDXCreateElement"}}]);