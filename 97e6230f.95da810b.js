(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{108:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return l})),n.d(t,"metadata",(function(){return o})),n.d(t,"toc",(function(){return s})),n.d(t,"default",(function(){return d}));var a=n(3),i=n(7),r=(n(0),n(131)),l={title:"Getting Started"},o={unversionedId:"guides/getting-started",id:"guides/getting-started",isDocsHomePage:!1,title:"Getting Started",description:"Let's get started with Frictionless! We will learn how to install and use the framework. The simple example below will showcase the framework's basic functionality.",source:"@site/../docs/guides/getting-started.md",slug:"/guides/getting-started",permalink:"/docs/guides/getting-started",editUrl:"https://github.com/frictionlessdata/frictionless-py/edit/master/docs/../docs/guides/getting-started.md",version:"current",lastUpdatedBy:"roll",lastUpdatedAt:1612969661,sidebar:"guides",previous:{title:"Guides Overview",permalink:"/docs/guides/guides-overview"},next:{title:"Introduction Guide",permalink:"/docs/guides/introduction-guide"}},s=[{value:"Installation",id:"installation",children:[]},{value:"Usage",id:"usage",children:[]},{value:"Example",id:"example",children:[]}],c={toc:s};function d(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"Let's get started with Frictionless! We will learn how to install and use the framework. The simple example below will showcase the framework's basic functionality."),Object(r.b)("h2",{id:"installation"},"Installation"),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"The framework requires Python3.6+. Versioning follows the ",Object(r.b)("a",{parentName:"p",href:"https://semver.org/"},"SemVer Standard"))),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-bash"},"$ pip install frictionless\n$ pip install frictionless[sql] # to install a core plugin\n$ frictionless --version\n3.48.0\n")),Object(r.b)("p",null,"The framework supports CSV, Excel, and JSON formats by default. Please use the command above to install a core plugin and add support for SQL, Pandas, HTML, and others (check the ",Object(r.b)("a",{parentName:"p",href:"https://framework.frictionlessdata.io/docs/references/plugins-reference"},"list of Frictionless Framework plugins and their status"),"). Usually, you don't need to think about it in advance\u2013frictionless will display a useful error message about a missing plugin with installation instructions."),Object(r.b)("h2",{id:"usage"},"Usage"),Object(r.b)("p",null,"The framework can be used:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"as a Python library"),Object(r.b)("li",{parentName:"ul"},"as a command-line interface"),Object(r.b)("li",{parentName:"ul"},"as a restful API server")),Object(r.b)("p",null,"For instance, all the examples below do the same thing:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-python"},"# Python:\nfrom frictionless import extract\n\nrows = extract('data/table.csv')\n\n# CLI:\n$ frictionless extract data/table.csv\n\n# API:\n[POST] /extract {\"source': 'data/table.csv\"}\n")),Object(r.b)("p",null,"All these interfaces are as much alike as possible regarding naming conventions and the way you interact with them. Usually, it's straightforward to translate, for instance, Python code to a command-line call. Frictionless provides code completion for Python and the command-line, which should help to get useful hints in real time."),Object(r.b)("p",null,"Arguments conform to the following naming convention:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"for Python interfaces, they are snake_cased, e.g. ",Object(r.b)("inlineCode",{parentName:"li"},"missing_values")),Object(r.b)("li",{parentName:"ul"},"within dictionaries or JSON objects, they are camelCased, e.g. ",Object(r.b)("inlineCode",{parentName:"li"},"missingValues")),Object(r.b)("li",{parentName:"ul"},"in the command line, they use dashes, e.g. ",Object(r.b)("inlineCode",{parentName:"li"},"--missing-values"))),Object(r.b)("p",null,"To get the documentation for a command-line interface just use the ",Object(r.b)("inlineCode",{parentName:"p"},"--help")," flag:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-bash"},"$ frictionless --help\n$ frictionless describe --help\n$ frictionless extract --help\n$ frictionless validate --help\n$ frictionless transform --help\n")),Object(r.b)("h2",{id:"example"},"Example"),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"All the examples use the data folder from ",Object(r.b)("a",{parentName:"p",href:"https://github.com/frictionlessdata/frictionless-py/"},"this")," repository")),Object(r.b)("p",null,"We will take a very messy data file:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-bash"},"$ cat data/invalid.csv\n")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},"id,name,,name\n1,english\n1,english\n\n2,german,1,2,3\n")),Object(r.b)("p",null,"First of all, let's use ",Object(r.b)("inlineCode",{parentName:"p"},"describe")," to infer the metadata directly from the tabular data. We can then edit and save it to provide others with useful information about the data:"),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"This output is in ",Object(r.b)("a",{parentName:"p",href:"https://yaml.org/"},"YAML"),", it is a default Frictionless output format.")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-bash"},"$ frictionless describe data/invalid.csv\n")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},"---\nmetadata: data/invalid.csv\n---\n\ncompression: 'no'\ncompressionPath: ''\ncontrol:\n  newline: ''\ndialect: {}\nencoding: utf-8\nformat: csv\nhashing: md5\nname: invalid\npath: data/invalid.csv\nprofile: tabular-data-resource\nquery: {}\nschema:\n  fields:\n    - name: id\n      type: integer\n    - name: name\n      type: string\n    - name: field3\n      type: integer\n    - name: name2\n      type: integer\nscheme: file\nstats:\n  bytes: 50\n  fields: 4\n  hash: 8c73c3d9d59088dcb2508e0b348bf8a8\n  rows: 4\n")),Object(r.b)("p",null,"Now that we have inferred a table schema from the data file (e.g., expected format of the table, expected type of each value in a column, etc.), we can use ",Object(r.b)("inlineCode",{parentName:"p"},"extract")," to read the normalized tabular data from the source CSV file:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-bash"},"$ frictionless extract data/invalid.csv\n")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},"---\ndata: data/invalid.csv\n---\n\n====  =======  ======  =====\nid    name     field3  name2\n====  =======  ======  =====\n   1  english  None    None\n   1  english  None    None\nNone  None     None    None\n   2  german        1      2\n====  =======  ======  =====\n")),Object(r.b)("p",null,"Last but not least, let's get a validation report. This report will help us to identify and fix all the errors present in the tabular data, as comprehensive information is provided for every problem:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-bash"},"$ frictionless validate data/invalid.csv\n")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},'---\ninvalid: data/invalid.csv\n---\n\n====  =====  ================  ================================================================================================\nrow   field  code              message\n====  =====  ================  ================================================================================================\nNone      3  blank-header      Header in field at position "3" is blank\nNone      4  duplicate-header  Header "name" in field at position "4" is duplicated to header in another field: at position "2"\n   2      3  missing-cell      Row at position "2" has a missing cell in field "field3" at position "3"\n   2      4  missing-cell      Row at position "2" has a missing cell in field "name2" at position "4"\n   3      3  missing-cell      Row at position "3" has a missing cell in field "field3" at position "3"\n   3      4  missing-cell      Row at position "3" has a missing cell in field "name2" at position "4"\n   4  None   blank-row         Row at position "4" is completely blank\n   5      5  extra-cell        Row at position "5" has an extra value in field at position "5"\n====  =====  ================  ================================================================================================\n')),Object(r.b)("p",null,"Now that we have all this information:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"we can clean up the table to ensure the data quality"),Object(r.b)("li",{parentName:"ul"},"we can use the metadata to describe and share the dataset"),Object(r.b)("li",{parentName:"ul"},"we can include the validation into our workflow to guarantee the validity"),Object(r.b)("li",{parentName:"ul"},"and much more: don't hesitate and read the following sections of the documentation!")))}d.isMDXComponent=!0},131:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return m}));var a=n(0),i=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=i.a.createContext({}),d=function(e){var t=i.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=d(e.components);return i.a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},b=i.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=d(n),b=a,m=p["".concat(l,".").concat(b)]||p[b]||u[b]||r;return n?i.a.createElement(m,o(o({ref:t},c),{},{components:n})):i.a.createElement(m,o({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,l=new Array(r);l[0]=b;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var c=2;c<r;c++)l[c]=n[c];return i.a.createElement.apply(null,l)}return i.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"}}]);