(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{131:function(e,n,t){"use strict";t.d(n,"a",(function(){return m})),t.d(n,"b",(function(){return b}));var a=t(0),r=t.n(a);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=r.a.createContext({}),c=function(e){var n=r.a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},m=function(e){var n=c(e.components);return r.a.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},u=r.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),m=c(t),u=a,b=m["".concat(s,".").concat(u)]||m[u]||d[u]||o;return t?r.a.createElement(b,i(i({ref:n},l),{},{components:t})):r.a.createElement(b,i({ref:n},l))}));function b(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,s=new Array(o);s[0]=u;var i={};for(var p in n)hasOwnProperty.call(n,p)&&(i[p]=n[p]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var l=2;l<o;l++)s[l]=t[l];return r.a.createElement.apply(null,s)}return r.a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},72:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return s})),t.d(n,"metadata",(function(){return i})),t.d(n,"toc",(function(){return p})),t.d(n,"default",(function(){return c}));var a=t(3),r=t(7),o=(t(0),t(131)),s={title:"Transforming Data"},i={unversionedId:"guides/transforming-data",id:"guides/transforming-data",isDocsHomePage:!1,title:"Transforming Data",description:"Transforming data in Frictionless means modifying a data + metadata from the state A to the state B. For example, it can be a dirty Excel file we need to transform to a cleaned CSV file or a folder of data files we want to update and save as a data package.",source:"@site/../docs/guides/transforming-data.md",slug:"/guides/transforming-data",permalink:"/docs/guides/transforming-data",editUrl:"https://github.com/frictionlessdata/frictionless-py/edit/master/docs/../docs/guides/transforming-data.md",version:"current",lastUpdatedBy:"roll",lastUpdatedAt:1612881959,sidebar:"guides",previous:{title:"Validating Data",permalink:"/docs/guides/validating-data"},next:{title:"Package Guide",permalink:"/docs/guides/package-guide"}},p=[{value:"Transform Functions",id:"transform-functions",children:[{value:"Transforming Resource",id:"transforming-resource",children:[]},{value:"Transforming Package",id:"transforming-package",children:[]},{value:"Transforming Pipeline",id:"transforming-pipeline",children:[]}]},{value:"Transform Options",id:"transform-options",children:[{value:"Resource",id:"resource",children:[]},{value:"Package",id:"package",children:[]},{value:"Pipeline",id:"pipeline",children:[]}]},{value:"Transform Principles",id:"transform-principles",children:[{value:"Conceptual Simplicity",id:"conceptual-simplicity",children:[]},{value:"Metadata Matters",id:"metadata-matters",children:[]},{value:"Data Streaming",id:"data-streaming",children:[]},{value:"Lazy Evaluation",id:"lazy-evaluation",children:[]},{value:"Lean Processing",id:"lean-processing",children:[]}]},{value:"Transform Steps",id:"transform-steps",children:[]},{value:"Resource Steps",id:"resource-steps",children:[{value:"Add Resource",id:"add-resource",children:[]},{value:"Remove Resource",id:"remove-resource",children:[]},{value:"Transform Resource",id:"transform-resource",children:[]},{value:"Update Resource",id:"update-resource",children:[]}]},{value:"Table Steps",id:"table-steps",children:[{value:"Aggregate Table",id:"aggregate-table",children:[]},{value:"Attach Tables",id:"attach-tables",children:[]},{value:"Debug Table",id:"debug-table",children:[]},{value:"Diff Tables",id:"diff-tables",children:[]},{value:"Intersect Tables",id:"intersect-tables",children:[]},{value:"Join Tables",id:"join-tables",children:[]},{value:"Melt Table",id:"melt-table",children:[]},{value:"Merge Tables",id:"merge-tables",children:[]},{value:"Pivot Table",id:"pivot-table",children:[]},{value:"Print Table",id:"print-table",children:[]},{value:"Recast Table",id:"recast-table",children:[]},{value:"Transpose Table",id:"transpose-table",children:[]},{value:"Validate Table",id:"validate-table",children:[]},{value:"Write Table",id:"write-table",children:[]}]},{value:"Field Steps",id:"field-steps",children:[{value:"Add Field",id:"add-field",children:[]},{value:"Filter Fields",id:"filter-fields",children:[]},{value:"Move Field",id:"move-field",children:[]},{value:"Remove Field",id:"remove-field",children:[]},{value:"Split Field",id:"split-field",children:[]},{value:"Unpack Field",id:"unpack-field",children:[]},{value:"Update Field",id:"update-field",children:[]}]},{value:"Row Steps",id:"row-steps",children:[{value:"Filter Rows",id:"filter-rows",children:[]},{value:"Search Rows",id:"search-rows",children:[]},{value:"Slice Rows",id:"slice-rows",children:[]},{value:"Sort Rows",id:"sort-rows",children:[]},{value:"Split Rows",id:"split-rows",children:[]},{value:"Subset Rows",id:"subset-rows",children:[]},{value:"Ungroup Rows",id:"ungroup-rows",children:[]}]},{value:"Cell Steps",id:"cell-steps",children:[{value:"Convert Cells",id:"convert-cells",children:[]},{value:"Fill Cells",id:"fill-cells",children:[]},{value:"Format Cells",id:"format-cells",children:[]},{value:"Interpolate Cells",id:"interpolate-cells",children:[]},{value:"Replace Cells",id:"replace-cells",children:[]},{value:"Set Cells",id:"set-cells",children:[]}]},{value:"Custom Steps",id:"custom-steps",children:[]},{value:"Transform Utils",id:"transform-utils",children:[]},{value:"Working with PETL",id:"working-with-petl",children:[]}],l={toc:p};function c(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},l,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("p",null,"Transforming data in Frictionless means modifying a data + metadata from the state A to the state B. For example, it can be a dirty Excel file we need to transform to a cleaned CSV file or a folder of data files we want to update and save as a data package."),Object(o.b)("p",null,"For the core transform functions Frictionless uses amazing ",Object(o.b)("a",{parentName:"p",href:"https://petl.readthedocs.io/en/stable/"},"PETL")," project under the hood. This library provides lazy-loading functionality in running data pipelines. On top of it Frictionless adds metadata management and a bridge between already familiar concepts like Pacakge/Resource and PETL's processors."),Object(o.b)("p",null,"Frictionless supports a few different kinds of data and metadata transformations:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"resource and package transforms"),Object(o.b)("li",{parentName:"ul"},"transforms based on a declarative pipeline")),Object(o.b)("p",null,"The main difference between the first two and pipelines that resource and package transforms are imperative while pipelines can be created beforehand or shared as a JSON file. Also, Frictionless supports a ",Object(o.b)("a",{parentName:"p",href:"https://frictionlessdata.io/tooling/python/working-with-dataflows/"},"Dataflows")," pipeline runner. You need to install the ",Object(o.b)("inlineCode",{parentName:"p"},"dataflows")," plugin to use it."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"! cat data/transform.csv\n")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"id,name,population\n1,germany,83\n2,france,66\n3,spain,47\n")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"! cat data/transform-groups.csv\n")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"id,name,population,year\n1,germany,83,2020\n2,germany,77,1920\n3,france,66,2020\n4,france,54,1920\n5,spain,47,2020\n6,spain,33,1920\n")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"! cat data/transform-pivot.csv\n")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"region,gender,style,units\neast,boy,tee,12\neast,boy,golf,14\neast,boy,fancy,7\neast,girl,tee,3\neast,girl,golf,8\neast,girl,fancy,18\nwest,boy,tee,12\nwest,boy,golf,15\nwest,boy,fancy,8\nwest,girl,tee,6\nwest,girl,golf,16\nwest,girl,fancy,1\n")),Object(o.b)("h2",{id:"transform-functions"},"Transform Functions"),Object(o.b)("p",null,"The high-level interface for transforming data provided by Frictionless is a set of ",Object(o.b)("inlineCode",{parentName:"p"},"transform")," functions:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"transform"),": it will detect the source type and transform data accordingly"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"transform_resource"),": it transforms a resource"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"transform_package"),": it transforms a package"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"transform_pipeline"),": it transforms resource or package based on a declarative pipeline definition")),Object(o.b)("h3",{id:"transforming-resource"},"Transforming Resource"),Object(o.b)("p",null,"Let's write our first transform. It's as easy as defining a source resource, applying transform steps and getting back a resulting target resource:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},'from pprint import pprint\nfrom frictionless import Resource, transform, steps\n\nsource = Resource(path="data/transform.csv")\ntarget = transform(\n    source,\n    steps=[\n        steps.table_normalize(),\n        steps.table_melt(field_name="name"),\n    ],\n)\npprint(target.schema)\npprint(target.read_rows())\n')),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"{'fields': [{'name': 'name', 'type': 'string'},\n            {'name': 'variable'},\n            {'name': 'value'}]}\n[Row([('name', 'germany'), ('variable', 'id'), ('value', 1)]),\n Row([('name', 'germany'), ('variable', 'population'), ('value', 83)]),\n Row([('name', 'france'), ('variable', 'id'), ('value', 2)]),\n Row([('name', 'france'), ('variable', 'population'), ('value', 66)]),\n Row([('name', 'spain'), ('variable', 'id'), ('value', 3)]),\n Row([('name', 'spain'), ('variable', 'population'), ('value', 47)])]\n")),Object(o.b)("p",null,"Let's break the transforming steps we applied down:"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},Object(o.b)("inlineCode",{parentName:"li"},"steps.table_normalize")," - cast data types and shape the table according to the schema, inferred or provided"),Object(o.b)("li",{parentName:"ol"},Object(o.b)("inlineCode",{parentName:"li"},"steps.table_melt")," - melt the table as it's done in R-Language or in other scientific libraries like ",Object(o.b)("inlineCode",{parentName:"li"},"pandas"))),Object(o.b)("p",null,"There are dozens of other available steps that will be covered below."),Object(o.b)("h3",{id:"transforming-package"},"Transforming Package"),Object(o.b)("p",null,"Transforming a package is not much more difficult than a resource. Basically, a package is a set of resources so we will be transforming resources exactly the same way as we did above + we will be managing the resources list itself, adding or removing them:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Package(resources=[Resource(name='main', path=\"data/transform.csv\")])\ntarget = transform(\n    source,\n    steps=[\n        steps.resource_add(name='extra', path='data/transform.csv'),\n        steps.resource_transform(name='main', steps=[\n            steps.table_merge(resource='extra'),\n            steps.row_sort(field_names=['id'])\n        ]),\n        steps.resource_remove(name=\"extra\"),\n    ],\n)\npprint(target.resource_names)\npprint(target.get_resource('main').schema)\npprint(target.get_resource('main').read_rows())\n")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"['main']\n{'fields': [{'name': 'id', 'type': 'integer'},\n            {'name': 'name', 'type': 'string'},\n            {'name': 'population', 'type': 'integer'}]}\n[Row([('id', 1), ('name', 'germany'), ('population', 83)]),\n Row([('id', 1), ('name', 'germany'), ('population', 83)]),\n Row([('id', 2), ('name', 'france'), ('population', 66)]),\n Row([('id', 2), ('name', 'france'), ('population', 66)]),\n Row([('id', 3), ('name', 'spain'), ('population', 47)]),\n Row([('id', 3), ('name', 'spain'), ('population', 47)])]\n")),Object(o.b)("p",null,"The exact transformation we have applied actually doesn't make any sense as we just duplicated every row of the ",Object(o.b)("inlineCode",{parentName:"p"},"main")," resource. But it must have provided basic understanding of how simple and at the same time flexible package transformations can be."),Object(o.b)("h3",{id:"transforming-pipeline"},"Transforming Pipeline"),Object(o.b)("p",null,"A pipeline is a metadata object having one of these types:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"resource"),Object(o.b)("li",{parentName:"ul"},"package"),Object(o.b)("li",{parentName:"ul"},"dataflows"),Object(o.b)("li",{parentName:"ul"},"others (depending on custom plugins you use)")),Object(o.b)("p",null,"For resource and package types it's basically the same functionality as we have seen above but written declaratively. So let's just run the same resource transformation as we did in the ",Object(o.b)("inlineCode",{parentName:"p"},"Tranforming Resource")," section:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"from pprint import pprint\nfrom frictionless import Pipeline, transform, steps\n\npipeline = Pipeline({\n    'type': 'resource',\n    'source': {'path': 'data/transform.csv'},\n    'steps': [\n        {'type': 'tableNormalize', 'spec': {}},\n        {'type': 'tableMelt', 'spec': {'fieldName': 'name'}}\n    ]\n})\ntarget = transform(pipeline)\npprint(target.schema)\npprint(target.read_rows())\n")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"{'fields': [{'name': 'name', 'type': 'string'},\n            {'name': 'variable'},\n            {'name': 'value'}]}\n[Row([('name', 'germany'), ('variable', 'id'), ('value', 1)]),\n Row([('name', 'germany'), ('variable', 'population'), ('value', 83)]),\n Row([('name', 'france'), ('variable', 'id'), ('value', 2)]),\n Row([('name', 'france'), ('variable', 'population'), ('value', 66)]),\n Row([('name', 'spain'), ('variable', 'id'), ('value', 3)]),\n Row([('name', 'spain'), ('variable', 'population'), ('value', 47)])]\n")),Object(o.b)("p",null,"And as we had expected we got the same result."),Object(o.b)("h2",{id:"transform-options"},"Transform Options"),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"transorm")," function accepts the ",Object(o.b)("inlineCode",{parentName:"p"},"source")," argument which can be a resource, a package or a pipeline descriptor"),Object(o.b)("h3",{id:"resource"},"Resource"),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"transform_resource")," function also accepts:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"steps")," argument to define which steps should be applied on the source resource.")),Object(o.b)("h3",{id:"package"},"Package"),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"transform_package")," function also accepts:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"steps")," argument to define which steps should be applied on the source package.")),Object(o.b)("h3",{id:"pipeline"},"Pipeline"),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"transform_pipeline")," function doesn't accept any additional arguments."),Object(o.b)("h2",{id:"transform-principles"},"Transform Principles"),Object(o.b)("p",null,"Frictionless Transforms bases on a few core principles which is shared with other parts of the framework:"),Object(o.b)("h3",{id:"conceptual-simplicity"},"Conceptual Simplicity"),Object(o.b)("p",null,"Frictionless Transforms is not more than a list of functions that accept a source resource/package object and return a target resource/package object. Every function just updates the input's metadata and data and that's it. Thanks to this simplicity even a non-technical user can read the ",Object(o.b)("a",{parentName:"p",href:"https://github.com/frictionlessdata/frictionless-py/blob/7ad8e692ad00131cdc9fa51258d8b860c62e77bc/frictionless/transform/resource.py#L7"},"source code")," of the transform function and understand how it works. And understanding the tools you use can be really important for mastering them."),Object(o.b)("h3",{id:"metadata-matters"},"Metadata Matters"),Object(o.b)("p",null,"There is plenty of great ETL-frameworks written in Python and other languages. As said, we use one of them (PETL) under the hood. The core difference between Frictionless and others that we treat metadata as a first-class citizen. It means that you don't loose type and other important information during the pipeline evaluation."),Object(o.b)("h3",{id:"data-streaming"},"Data Streaming"),Object(o.b)("p",null,"Whenever it's possible Frictionless streams the data instead of reading it into memory. For example, for sorting big tables we use a memory usage threshold and it's met we use file system to unload the data. Ability to stream the data give users power to work with files of any size."),Object(o.b)("h3",{id:"lazy-evaluation"},"Lazy Evaluation"),Object(o.b)("p",null,"Unlike to systems like ",Object(o.b)("inlineCode",{parentName:"p"},"Data Package Pipelines")," core Frictionless Transforms doesn't have a back-pressured flow as all data manipulation happen on-demand. For example, if you transform a data package containing 10 big csv files but you only need to reshape one table Frictionless will not even read other tables. Actually, when you call ",Object(o.b)("inlineCode",{parentName:"p"},"target = transform(source)")," it does almost nothing until the data reading call like ",Object(o.b)("inlineCode",{parentName:"p"},"target.read_rows()")," is made."),Object(o.b)("h3",{id:"lean-processing"},"Lean Processing"),Object(o.b)("p",null,'Similar to the section above, Frictionless tries to be as much explicit as possible regarding actions taken. For example, it will not use CPU resources to cast data unless a user adds a "normalize", "validate" or similar steps. So it\'s possible to transform rather big file without even casting types, for example, if you just need to reshape it.'),Object(o.b)("h2",{id:"transform-steps"},"Transform Steps"),Object(o.b)("p",null,"Frictionless includes more than 40+ builtin transform steps. They are grouped by the object so you can find them easily if you have code auto completion. Start typing, for example, ",Object(o.b)("inlineCode",{parentName:"p"},"steps.table...")," and you will see all the available steps. The groups are listed below and you will find every group described in more detail in the next sections. It's also possible to write custom transform steps. Please read the section below to learn more about it."),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"resource"),Object(o.b)("li",{parentName:"ul"},"table"),Object(o.b)("li",{parentName:"ul"},"field"),Object(o.b)("li",{parentName:"ul"},"row"),Object(o.b)("li",{parentName:"ul"},"cell")),Object(o.b)("h2",{id:"resource-steps"},"Resource Steps"),Object(o.b)("h3",{id:"add-resource"},"Add Resource"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Package(resources=[Resource(name='main', path=\"data/transform.csv\")])\ntarget = transform(\n    source,\n    steps=[\n        steps.resource_add(name='extra', path='data/transform.csv'),\n    ],\n)\npprint(target.resource_names)\npprint(target.get_resource('extra').schema)\npprint(target.get_resource('extra').read_rows())\n")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"['main', 'extra']\n{'fields': [{'name': 'id', 'type': 'integer'},\n            {'name': 'name', 'type': 'string'},\n            {'name': 'population', 'type': 'integer'}]}\n[Row([('id', 1), ('name', 'germany'), ('population', 83)]),\n Row([('id', 2), ('name', 'france'), ('population', 66)]),\n Row([('id', 3), ('name', 'spain'), ('population', 47)])]\n")),Object(o.b)("h3",{id:"remove-resource"},"Remove Resource"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Package(resources=[Resource(name='main', path=\"data/transform.csv\")])\ntarget = transform(\n    source,\n    steps=[\n        steps.resource_remove(name='main'),\n    ],\n)\npprint(target)\n")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"{'profile': 'data-package', 'resources': []}\n")),Object(o.b)("h3",{id:"transform-resource"},"Transform Resource"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Package(resources=[Resource(name='main', path=\"data/transform.csv\")])\ntarget = transform(\n    source,\n    steps=[\n        steps.resource_add(name='extra', path='data/transform.csv'),\n        steps.resource_transform(name='main', steps=[\n            steps.table_merge(resource='extra'),\n            steps.row_sort(field_names=['id'])\n        ]),\n        steps.resource_remove(name=\"extra\"),\n    ],\n)\npprint(target.resource_names)\npprint(target.get_resource('main').schema)\npprint(target.get_resource('main').read_rows())\n")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"['main']\n{'fields': [{'name': 'id', 'type': 'integer'},\n            {'name': 'name', 'type': 'string'},\n            {'name': 'population', 'type': 'integer'}]}\n[Row([('id', 1), ('name', 'germany'), ('population', 83)]),\n Row([('id', 1), ('name', 'germany'), ('population', 83)]),\n Row([('id', 2), ('name', 'france'), ('population', 66)]),\n Row([('id', 2), ('name', 'france'), ('population', 66)]),\n Row([('id', 3), ('name', 'spain'), ('population', 47)]),\n Row([('id', 3), ('name', 'spain'), ('population', 47)])]\n")),Object(o.b)("h3",{id:"update-resource"},"Update Resource"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Package(resources=[Resource(name='main', path=\"data/transform.csv\")])\ntarget = transform(\n    source,\n    steps=[\n        steps.resource_update(name='main', title='Main Resource', description='For the docs'),\n    ],\n)\npprint(target.get_resource('main'))\n")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"{'compression': 'no',\n 'compressionPath': '',\n 'control': {'newline': ''},\n 'description': 'For the docs',\n 'dialect': {},\n 'encoding': 'utf-8',\n 'format': 'csv',\n 'hashing': 'md5',\n 'name': 'main',\n 'path': 'data/transform.csv',\n 'profile': 'tabular-data-resource',\n 'query': {},\n 'schema': {'fields': [{'name': 'id', 'type': 'integer'},\n                       {'name': 'name', 'type': 'string'},\n                       {'name': 'population', 'type': 'integer'}]},\n 'scheme': 'file',\n 'title': 'Main Resource'}\n")),Object(o.b)("h2",{id:"table-steps"},"Table Steps"),Object(o.b)("h3",{id:"aggregate-table"},"Aggregate Table"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path="data/transform-groups.csv")\ntarget = transform(\n    source,\n    steps=[\n        steps.table_normalize(),\n        steps.table_aggregate(\n            group_name="name", aggregation={"sum": ("population", sum)}\n        ),\n    ],\n)\npprint(target.schema)\npprint(target.read_rows())\n')),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"{'fields': [{'name': 'name', 'type': 'string'}, {'name': 'sum'}]}\n[Row([('name', 'france'), ('sum', 120)]),\n Row([('name', 'germany'), ('sum', 160)]),\n Row([('name', 'spain'), ('sum', 80)])]\n")),Object(o.b)("h3",{id:"attach-tables"},"Attach Tables"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path="data/transform.csv")\ntarget = transform(\n    source,\n    steps=[\n      steps.table_attach(resource=Resource(data=[["note"], ["large"], ["mid"]])),\n    ],\n)\npprint(target.schema)\npprint(target.read_rows())\n')),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"{'fields': [{'name': 'id', 'type': 'integer'},\n            {'name': 'name', 'type': 'string'},\n            {'name': 'population', 'type': 'integer'},\n            {'name': 'note', 'type': 'string'}]}\n[Row([('id', 1), ('name', 'germany'), ('population', 83), ('note', 'large')]),\n Row([('id', 2), ('name', 'france'), ('population', 66), ('note', 'mid')]),\n Row([('id', 3), ('name', 'spain'), ('population', 47), ('note', None)])]\n")),Object(o.b)("h3",{id:"debug-table"},"Debug Table"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path="data/transform.csv")\ntarget = transform(\n    source,\n    steps=[\n      steps.table_debug(function=print),\n    ],\n)\npprint(target.read_rows())\n')),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"['1', 'germany', '83']\n['2', 'france', '66']\n['3', 'spain', '47']\n[Row([('id', 1), ('name', 'germany'), ('population', 83)]),\n Row([('id', 2), ('name', 'france'), ('population', 66)]),\n Row([('id', 3), ('name', 'spain'), ('population', 47)])]\n")),Object(o.b)("h3",{id:"diff-tables"},"Diff Tables"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path="data/transform.csv")\ntarget = transform(\n    source,\n    steps=[\n        steps.table_normalize(),\n        steps.table_diff(\n            resource=Resource(\n                data=[\n                    ["id", "name", "population"],\n                    [1, "germany", 83],\n                    [2, "france", 50],\n                    [3, "spain", 47],\n                ]\n            )\n        ),\n    ]\n)\npprint(target.schema)\npprint(target.read_rows())\n')),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"{'fields': [{'name': 'id', 'type': 'integer'},\n            {'name': 'name', 'type': 'string'},\n            {'name': 'population', 'type': 'integer'}]}\n[Row([('id', 2), ('name', 'france'), ('population', 66)])]\n")),Object(o.b)("h3",{id:"intersect-tables"},"Intersect Tables"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path="data/transform.csv")\ntarget = transform(\n    source,\n    steps=[\n        steps.table_normalize(),\n        steps.table_intersect(\n            resource=Resource(\n                data=[\n                    ["id", "name", "population"],\n                    [1, "germany", 83],\n                    [2, "france", 50],\n                    [3, "spain", 47],\n                ]\n            ),\n        ),\n    ]\n)\npprint(target.schema)\npprint(target.read_rows())\n')),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"{'fields': [{'name': 'id', 'type': 'integer'},\n            {'name': 'name', 'type': 'string'},\n            {'name': 'population', 'type': 'integer'}]}\n[Row([('id', 1), ('name', 'germany'), ('population', 83)]),\n Row([('id', 3), ('name', 'spain'), ('population', 47)])]\n")),Object(o.b)("h3",{id:"join-tables"},"Join Tables"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path="data/transform.csv")\ntarget = transform(\n    source,\n    steps=[\n        steps.table_normalize(),\n        steps.table_join(\n            resource=Resource(data=[["id", "note"], [1, "beer"], [2, "vine"]]),\n            field_name="id",\n        ),\n    ]\n)\npprint(target.schema)\npprint(target.read_rows())\n')),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"{'fields': [{'name': 'id', 'type': 'integer'},\n            {'name': 'name', 'type': 'string'},\n            {'name': 'population', 'type': 'integer'},\n            {'name': 'note', 'type': 'string'}]}\n[Row([('id', 1), ('name', 'germany'), ('population', 83), ('note', 'beer')]),\n Row([('id', 2), ('name', 'france'), ('population', 66), ('note', 'vine')])]\n")),Object(o.b)("h3",{id:"melt-table"},"Melt Table"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path="data/transform.csv")\ntarget = transform(\n    source,\n    steps=[\n        steps.table_normalize(),\n        steps.table_melt(field_name="name"),\n    ]\n)\npprint(target.schema)\npprint(target.read_rows())\n')),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"{'fields': [{'name': 'name', 'type': 'string'},\n            {'name': 'variable'},\n            {'name': 'value'}]}\n[Row([('name', 'germany'), ('variable', 'id'), ('value', 1)]),\n Row([('name', 'germany'), ('variable', 'population'), ('value', 83)]),\n Row([('name', 'france'), ('variable', 'id'), ('value', 2)]),\n Row([('name', 'france'), ('variable', 'population'), ('value', 66)]),\n Row([('name', 'spain'), ('variable', 'id'), ('value', 3)]),\n Row([('name', 'spain'), ('variable', 'population'), ('value', 47)])]\n")),Object(o.b)("h3",{id:"merge-tables"},"Merge Tables"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path="data/transform.csv")\ntarget = transform(\n    source,\n    steps=[\n        steps.table_merge(\n            resource=Resource(data=[["id", "name", "note"], [4, "malta", "island"]])\n        ),\n    ]\n)\npprint(target.schema)\npprint(target.read_rows())\n')),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"{'fields': [{'name': 'id', 'type': 'integer'},\n            {'name': 'name', 'type': 'string'},\n            {'name': 'population', 'type': 'integer'},\n            {'name': 'note', 'type': 'string'}]}\n[Row([('id', 1), ('name', 'germany'), ('population', 83), ('note', None)]),\n Row([('id', 2), ('name', 'france'), ('population', 66), ('note', None)]),\n Row([('id', 3), ('name', 'spain'), ('population', 47), ('note', None)]),\n Row([('id', 4), ('name', 'malta'), ('population', None), ('note', 'island')])]\n")),Object(o.b)("h3",{id:"pivot-table"},"Pivot Table"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path="data/transform-pivot.csv")\ntarget = transform(\n    source,\n    steps=[\n        steps.table_normalize(),\n        steps.table_pivot(f1="region", f2="gender", f3="units", aggfun=sum),\n    ]\n)\npprint(target.schema)\npprint(target.read_rows())\n')),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"{'fields': [{'name': 'region', 'type': 'string'},\n            {'name': 'boy', 'type': 'integer'},\n            {'name': 'girl', 'type': 'integer'}]}\n[Row([('region', 'east'), ('boy', 33), ('girl', 29)]),\n Row([('region', 'west'), ('boy', 35), ('girl', 23)])]\n")),Object(o.b)("h3",{id:"print-table"},"Print Table"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path="data/transform.csv")\ntarget = transform(\n    source,\n    steps=[\n        steps.table_normalize(),\n        steps.table_print(),\n    ]\n)\n')),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"==  =======  ==========\nid  name     population\n==  =======  ==========\n 1  germany          83\n 2  france           66\n 3  spain            47\n==  =======  ==========\n")),Object(o.b)("h3",{id:"recast-table"},"Recast Table"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path="data/transform.csv")\ntarget = transform(\n    source,\n    steps=[\n        steps.table_normalize(),\n        steps.table_melt(field_name="id"),\n        steps.table_recast(field_name="id"),\n    ]\n)\npprint(target.schema)\npprint(target.read_rows())\n')),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"{'fields': [{'name': 'id', 'type': 'integer'},\n            {'name': 'name', 'type': 'string'},\n            {'name': 'population', 'type': 'integer'}]}\n[Row([('id', 1), ('name', 'germany'), ('population', 83)]),\n Row([('id', 2), ('name', 'france'), ('population', 66)]),\n Row([('id', 3), ('name', 'spain'), ('population', 47)])]\n")),Object(o.b)("h3",{id:"transpose-table"},"Transpose Table"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path="data/transform.csv")\ntarget = transform(\n    source,\n    steps=[\n        steps.table_normalize(),\n        steps.table_transpose(),\n    ]\n)\npprint(target.schema)\npprint(target.read_rows())\n')),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"{'fields': [{'name': 'name', 'type': 'string'},\n            {'name': 'germany', 'type': 'integer'},\n            {'name': 'france', 'type': 'integer'},\n            {'name': 'spain', 'type': 'integer'}]}\n[Row([('name', 'population'), ('germany', 83), ('france', 66), ('spain', 47)])]\n")),Object(o.b)("h3",{id:"validate-table"},"Validate Table"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path="data/transform.csv")\ntarget = transform(\n    source,\n    steps=[\n        steps.cell_set(field_name="population", value="bad"),\n        steps.table_validate(),\n    ]\n)\npprint(target.schema)\ntry:\n  pprint(target.read_rows())\nexcept Exception as exception:\n  pprint(exception)\n')),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"{'fields': [{'name': 'id', 'type': 'integer'},\n            {'name': 'name', 'type': 'string'},\n            {'name': 'population', 'type': 'integer'}]}\nFrictionlessException('[step-error] The transfrom step has an error: \"table_validate\" raises \"[type-error] The cell \"bad\" in row at position \"2\" and field \"population\" at position \"3\" has incompatible type: type is \"integer/default\"\"')\n")),Object(o.b)("h3",{id:"write-table"},"Write Table"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path=\"data/transform.csv\")\ntarget = transform(\n    source,\n    steps=[\n        steps.table_write(path='tmp/transform.json'),\n    ]\n)\n")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"! cat tmp/transform.json\n")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},'[\n  [\n    "id",\n    "name",\n    "population"\n  ],\n  [\n    1,\n    "germany",\n    83\n  ],\n  [\n    2,\n    "france",\n    66\n  ],\n  [\n    3,\n    "spain",\n    47\n  ]\n]\n')),Object(o.b)("h2",{id:"field-steps"},"Field Steps"),Object(o.b)("h3",{id:"add-field"},"Add Field"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path="data/transform.csv")\ntarget = transform(\n    source,\n    steps=[\n        steps.field_add(name="note", type="string", value="eu"),\n    ]\n)\npprint(target.schema)\npprint(target.read_rows())\n')),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"{'fields': [{'name': 'id', 'type': 'integer'},\n            {'name': 'name', 'type': 'string'},\n            {'name': 'population', 'type': 'integer'},\n            {'name': 'note', 'type': 'string'}]}\n[Row([('id', 1), ('name', 'germany'), ('population', 83), ('note', 'eu')]),\n Row([('id', 2), ('name', 'france'), ('population', 66), ('note', 'eu')]),\n Row([('id', 3), ('name', 'spain'), ('population', 47), ('note', 'eu')])]\n")),Object(o.b)("h3",{id:"filter-fields"},"Filter Fields"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path="data/transform.csv")\ntarget = transform(\n    source,\n    steps=[\n        steps.field_filter(names=["id", "name"]),\n    ]\n)\npprint(target.schema)\npprint(target.read_rows())\n')),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"{'fields': [{'name': 'id', 'type': 'integer'},\n            {'name': 'name', 'type': 'string'}]}\n[Row([('id', 1), ('name', 'germany')]),\n Row([('id', 2), ('name', 'france')]),\n Row([('id', 3), ('name', 'spain')])]\n")),Object(o.b)("h3",{id:"move-field"},"Move Field"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path="data/transform.csv")\ntarget = transform(\n    source,\n    steps=[\n        steps.field_move(name="id", position=3),\n    ]\n)\npprint(target.schema)\npprint(target.read_rows())\n')),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"{'fields': [{'name': 'name', 'type': 'string'},\n            {'name': 'population', 'type': 'integer'},\n            {'name': 'id', 'type': 'integer'}]}\n[Row([('name', 'germany'), ('population', 83), ('id', 1)]),\n Row([('name', 'france'), ('population', 66), ('id', 2)]),\n Row([('name', 'spain'), ('population', 47), ('id', 3)])]\n")),Object(o.b)("h3",{id:"remove-field"},"Remove Field"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path="data/transform.csv")\ntarget = transform(\n    source,\n    steps=[\n        steps.field_remove(names=["id"]),\n    ]\n)\npprint(target.schema)\npprint(target.read_rows())\n')),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"{'fields': [{'name': 'name', 'type': 'string'},\n            {'name': 'population', 'type': 'integer'}]}\n[Row([('name', 'germany'), ('population', 83)]),\n Row([('name', 'france'), ('population', 66)]),\n Row([('name', 'spain'), ('population', 47)])]\n")),Object(o.b)("h3",{id:"split-field"},"Split Field"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path="data/transform.csv")\ntarget = transform(\n    source,\n    steps=[\n        steps.field_split(name="name", to_names=["name1", "name2"], pattern="a"),\n    ]\n)\npprint(target.schema)\npprint(target.read_rows())\n')),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"{'fields': [{'name': 'id', 'type': 'integer'},\n            {'name': 'population', 'type': 'integer'},\n            {'name': 'name1', 'type': 'string'},\n            {'name': 'name2', 'type': 'string'}]}\n[Row([('id', 1), ('population', 83), ('name1', 'germ'), ('name2', 'ny')]),\n Row([('id', 2), ('population', 66), ('name1', 'fr'), ('name2', 'nce')]),\n Row([('id', 3), ('population', 47), ('name1', 'sp'), ('name2', 'in')])]\n")),Object(o.b)("h3",{id:"unpack-field"},"Unpack Field"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path="data/transform.csv")\ntarget = transform(\n    source,\n    steps=[\n        steps.field_update(name="id", type="array", value=[1, 1]),\n        steps.field_unpack(name="id", to_names=["id2", "id3"]),\n    ]\n)\npprint(target.schema)\npprint(target.read_rows())\n')),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"{'fields': [{'name': 'name', 'type': 'string'},\n            {'name': 'population', 'type': 'integer'},\n            {'name': 'id2'},\n            {'name': 'id3'}]}\n[Row([('name', 'germany'), ('population', 83), ('id2', 1), ('id3', 1)]),\n Row([('name', 'france'), ('population', 66), ('id2', 1), ('id3', 1)]),\n Row([('name', 'spain'), ('population', 47), ('id2', 1), ('id3', 1)])]\n")),Object(o.b)("h3",{id:"update-field"},"Update Field"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path="data/transform.csv")\ntarget = transform(\n    source,\n    steps=[\n        steps.field_update(name="id", type="string", value=str),\n    ]\n)\npprint(target.schema)\npprint(target.read_rows())\n')),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"{'fields': [{'name': 'id', 'type': 'string'},\n            {'name': 'name', 'type': 'string'},\n            {'name': 'population', 'type': 'integer'}]}\n[Row([('id', '1'), ('name', 'germany'), ('population', 83)]),\n Row([('id', '2'), ('name', 'france'), ('population', 66)]),\n Row([('id', '3'), ('name', 'spain'), ('population', 47)])]\n")),Object(o.b)("h2",{id:"row-steps"},"Row Steps"),Object(o.b)("h3",{id:"filter-rows"},"Filter Rows"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path="data/transform.csv")\ntarget = transform(\n    source,\n    steps=[\n        steps.table_normalize(),\n        steps.row_filter(predicat="<formula>id > 1"),\n    ]\n)\npprint(target.schema)\npprint(target.read_rows())\n')),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"{'fields': [{'name': 'id', 'type': 'integer'},\n            {'name': 'name', 'type': 'string'},\n            {'name': 'population', 'type': 'integer'}]}\n[Row([('id', 2), ('name', 'france'), ('population', 66)]),\n Row([('id', 3), ('name', 'spain'), ('population', 47)])]\n")),Object(o.b)("h3",{id:"search-rows"},"Search Rows"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path="data/transform.csv")\ntarget = transform(\n    source,\n    steps=[\n        steps.row_search(regex=r"^f.*"),\n    ]\n)\npprint(target.schema)\npprint(target.read_rows())\n')),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"{'fields': [{'name': 'id', 'type': 'integer'},\n            {'name': 'name', 'type': 'string'},\n            {'name': 'population', 'type': 'integer'}]}\n[Row([('id', 2), ('name', 'france'), ('population', 66)])]\n")),Object(o.b)("h3",{id:"slice-rows"},"Slice Rows"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path="data/transform.csv")\ntarget = transform(\n    source,\n    steps=[\n        steps.row_slice(head=2),\n    ]\n)\npprint(target.schema)\npprint(target.read_rows())\n')),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"{'fields': [{'name': 'id', 'type': 'integer'},\n            {'name': 'name', 'type': 'string'},\n            {'name': 'population', 'type': 'integer'}]}\n[Row([('id', 1), ('name', 'germany'), ('population', 83)]),\n Row([('id', 2), ('name', 'france'), ('population', 66)])]\n")),Object(o.b)("h3",{id:"sort-rows"},"Sort Rows"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path="data/transform.csv")\ntarget = transform(\n    source,\n    steps=[\n        steps.row_sort(field_names=["name"]),\n    ]\n)\npprint(target.schema)\npprint(target.read_rows())\n')),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"{'fields': [{'name': 'id', 'type': 'integer'},\n            {'name': 'name', 'type': 'string'},\n            {'name': 'population', 'type': 'integer'}]}\n[Row([('id', 2), ('name', 'france'), ('population', 66)]),\n Row([('id', 1), ('name', 'germany'), ('population', 83)]),\n Row([('id', 3), ('name', 'spain'), ('population', 47)])]\n")),Object(o.b)("h3",{id:"split-rows"},"Split Rows"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path="data/transform.csv")\ntarget = transform(\n    source,\n    steps=[\n        steps.row_split(field_name="name", pattern="a"),\n    ]\n)\npprint(target.schema)\npprint(target.read_rows())\n')),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"{'fields': [{'name': 'id', 'type': 'integer'},\n            {'name': 'name', 'type': 'string'},\n            {'name': 'population', 'type': 'integer'}]}\n[Row([('id', 1), ('name', 'germ'), ('population', 83)]),\n Row([('id', 1), ('name', 'ny'), ('population', 83)]),\n Row([('id', 2), ('name', 'fr'), ('population', 66)]),\n Row([('id', 2), ('name', 'nce'), ('population', 66)]),\n Row([('id', 3), ('name', 'sp'), ('population', 47)]),\n Row([('id', 3), ('name', 'in'), ('population', 47)])]\n")),Object(o.b)("h3",{id:"subset-rows"},"Subset Rows"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path="data/transform.csv")\ntarget = transform(\n    source,\n    steps=[\n        steps.field_update(name="id", value=1),\n        steps.row_subset(subset="conflicts", field_name="id"),\n    ]\n)\npprint(target.schema)\npprint(target.read_rows())\n')),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"{'fields': [{'name': 'id', 'type': 'integer'},\n            {'name': 'name', 'type': 'string'},\n            {'name': 'population', 'type': 'integer'}]}\n[Row([('id', 1), ('name', 'germany'), ('population', 83)]),\n Row([('id', 1), ('name', 'france'), ('population', 66)]),\n Row([('id', 1), ('name', 'spain'), ('population', 47)])]\n")),Object(o.b)("h3",{id:"ungroup-rows"},"Ungroup Rows"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path="data/transform-groups.csv")\ntarget = transform(\n    source,\n    steps=[\n        steps.row_ungroup(group_name="name", selection="first"),\n    ]\n)\npprint(target.schema)\npprint(target.read_rows())\n')),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"{'fields': [{'name': 'id', 'type': 'integer'},\n            {'name': 'name', 'type': 'string'},\n            {'name': 'population', 'type': 'integer'},\n            {'name': 'year', 'type': 'integer'}]}\n[Row([('id', 3), ('name', 'france'), ('population', 66), ('year', 2020)]),\n Row([('id', 1), ('name', 'germany'), ('population', 83), ('year', 2020)]),\n Row([('id', 5), ('name', 'spain'), ('population', 47), ('year', 2020)])]\n")),Object(o.b)("h2",{id:"cell-steps"},"Cell Steps"),Object(o.b)("h3",{id:"convert-cells"},"Convert Cells"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path="data/transform.csv")\ntarget = transform(\n    source,\n    steps=[\n        steps.cell_convert(value="n/a", field_name="name"),\n    ]\n)\npprint(target.schema)\npprint(target.read_rows())\n')),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"{'fields': [{'name': 'id', 'type': 'integer'},\n            {'name': 'name', 'type': 'string'},\n            {'name': 'population', 'type': 'integer'}]}\n[Row([('id', 1), ('name', 'n/a'), ('population', 83)]),\n Row([('id', 2), ('name', 'n/a'), ('population', 66)]),\n Row([('id', 3), ('name', 'n/a'), ('population', 47)])]\n")),Object(o.b)("h3",{id:"fill-cells"},"Fill Cells"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path="data/transform.csv")\ntarget = transform(\n    source,\n    steps=[\n        steps.cell_replace(pattern="france", replace=None),\n        steps.cell_fill(field_name="name", value="FRANCE"),\n    ]\n)\npprint(target.schema)\npprint(target.read_rows())\n')),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"{'fields': [{'name': 'id', 'type': 'integer'},\n            {'name': 'name', 'type': 'string'},\n            {'name': 'population', 'type': 'integer'}]}\n[Row([('id', 1), ('name', 'germany'), ('population', 83)]),\n Row([('id', 2), ('name', 'FRANCE'), ('population', 66)]),\n Row([('id', 3), ('name', 'spain'), ('population', 47)])]\n")),Object(o.b)("h3",{id:"format-cells"},"Format Cells"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path="data/transform.csv")\ntarget = transform(\n    source,\n    steps=[\n        steps.cell_format(template="Prefix: {0}", field_name="name"),\n    ]\n)\npprint(target.schema)\npprint(target.read_rows())\n')),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"{'fields': [{'name': 'id', 'type': 'integer'},\n            {'name': 'name', 'type': 'string'},\n            {'name': 'population', 'type': 'integer'}]}\n[Row([('id', 1), ('name', 'Prefix: germany'), ('population', 83)]),\n Row([('id', 2), ('name', 'Prefix: france'), ('population', 66)]),\n Row([('id', 3), ('name', 'Prefix: spain'), ('population', 47)])]\n")),Object(o.b)("h3",{id:"interpolate-cells"},"Interpolate Cells"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path="data/transform.csv")\ntarget = transform(\n    source,\n    steps=[\n        steps.cell_interpolate(template="Prefix: %s", field_name="name"),\n    ]\n)\npprint(target.schema)\npprint(target.read_rows())\n')),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"{'fields': [{'name': 'id', 'type': 'integer'},\n            {'name': 'name', 'type': 'string'},\n            {'name': 'population', 'type': 'integer'}]}\n[Row([('id', 1), ('name', 'Prefix: germany'), ('population', 83)]),\n Row([('id', 2), ('name', 'Prefix: france'), ('population', 66)]),\n Row([('id', 3), ('name', 'Prefix: spain'), ('population', 47)])]\n")),Object(o.b)("h3",{id:"replace-cells"},"Replace Cells"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path="data/transform.csv")\ntarget = transform(\n    source,\n    steps=[\n        steps.cell_replace(pattern="france", replace="FRANCE"),\n    ]\n)\npprint(target.schema)\npprint(target.read_rows())\n')),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"{'fields': [{'name': 'id', 'type': 'integer'},\n            {'name': 'name', 'type': 'string'},\n            {'name': 'population', 'type': 'integer'}]}\n[Row([('id', 1), ('name', 'germany'), ('population', 83)]),\n Row([('id', 2), ('name', 'FRANCE'), ('population', 66)]),\n Row([('id', 3), ('name', 'spain'), ('population', 47)])]\n")),Object(o.b)("h3",{id:"set-cells"},"Set Cells"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\nsource = Resource(path="data/transform.csv")\ntarget = transform(\n    source,\n    steps=[\n          steps.cell_set(field_name="population", value=100),\n    ]\n)\npprint(target.schema)\npprint(target.read_rows())\n')),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"{'fields': [{'name': 'id', 'type': 'integer'},\n            {'name': 'name', 'type': 'string'},\n            {'name': 'population', 'type': 'integer'}]}\n[Row([('id', 1), ('name', 'germany'), ('population', 100)]),\n Row([('id', 2), ('name', 'france'), ('population', 100)]),\n Row([('id', 3), ('name', 'spain'), ('population', 100)])]\n")),Object(o.b)("h2",{id:"custom-steps"},"Custom Steps"),Object(o.b)("p",null,"Here is an example of a custom step written as a python function:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},'from pprint import pprint\nfrom frictionless import Package, Resource, transform, steps\n\ndef step(source, target):\n\n    # Data\n    def data():\n        for row in source.read_row_stream():\n            del row["id"]\n            yield row\n\n    # Meta\n    target.data = data\n    target.schema.remove_field("id")\n\n\nsource = Resource(path="data/transform.csv")\ntarget = transform(source, steps=[step])\npprint(target.schema)\npprint(target.read_rows())\n')),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"{'fields': [{'name': 'name', 'type': 'string'},\n            {'name': 'population', 'type': 'integer'}]}\n[Row([('name', 'germany'), ('population', 83)]),\n Row([('name', 'france'), ('population', 66)]),\n Row([('name', 'spain'), ('population', 47)])]\n")),Object(o.b)("h2",{id:"transform-utils"},"Transform Utils"),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"Transform Utils is under construction")),Object(o.b)("h2",{id:"working-with-petl"},"Working with PETL"),Object(o.b)("p",null,"In some cases, it's better to use a lower-level API to achieve some goal. A resource can be exported as a PETL table. For more information please visit PETL's ",Object(o.b)("a",{parentName:"p",href:"https://petl.readthedocs.io/en/stable/"},"documentation portal"),"."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-python"},"from frictionless import Resource\n\nresource = Resource(path='data/transform.csv')\npetl_table = resource.to_petl()\n# Use it with PETL framework\nprint(petl_table)\n")),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre"},"+---+---------+----+\n|   |         |    |\n+===+=========+====+\n| 1 | germany | 83 |\n+---+---------+----+\n| 2 | france  | 66 |\n+---+---------+----+\n| 3 | spain   | 47 |\n+---+---------+----+\n")))}c.isMDXComponent=!0}}]);