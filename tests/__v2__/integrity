# Integrity checks


#  unique_field:
#  source: data/unique_field.csv
#  schema: data/unique_field.json
#  checks:
#  - schema
#  report:
#  - [1, 10, 1, 'unique-constraint']


#  unique_field_wrong_type_or_format:
#  source:
#  - [id, unique_number]
#  - [a1, 100]
#  - [a2, not-a-number]
#  - [a3, 100]
#  schema:
#  fields:
#  - {name: id}
#  - {name: unique_number, type: number, constraints: {unique: true}}
#  checks:
#  - structure
#  - schema
#  report:
#  - [1, 3, 2, 'type-or-format-error']
#  - [1, 4, 2, 'unique-constraint']


#  unique_field_wrong_type_or_format:
#  source:
#  - [id, unique_number]
#  - [a1, 100]
#  - [a2, not-a-number]
#  - [a3, 100]
#  schema:
#  fields:
#  - {name: id}
#  - {name: unique_number, type: number, constraints: {unique: true}}
#  checks:
#  - structure
#  - schema
#  report:
#  - [1, 3, 2, 'type-or-format-error']
#  - [1, 4, 2, 'unique-constraint']


#  primary_key_fields:
#  source:
#  - [id, name]
#  - [1, Alex']
#  - [1, John]
#  - ['', Paul]
#  - [1, John]
#  schema:
#  fields:
#  - {name: id, type: integer}
#  - {name: name}
#  primaryKey: [id, name]
#  checks:
#  - schema
#  report:
#  - [1, 4, 1, 'required-constraint']
#  - [1, 5, 1, 'unique-constraint']


def test_composite_primary_key_unique_issue_215(log):
    descriptor = {
        'resources': [
            {
                'name': 'name',
                'data': [['id1', 'id2'], ['a', '1'], ['a', '2'],],
                'schema': {
                    'fields': [{'name': 'id1'}, {'name': 'id2'},],
                    'primaryKey': ['id1', 'id2'],
                },
            }
        ],
    }
    report = validate(descriptor)
    assert log(report) == []


def test_composite_primary_key_not_unique_issue_215(log):
    descriptor = {
        'resources': [
            {
                'name': 'name',
                'data': [['id1', 'id2'], ['a', '1'], ['a', '1'],],
                'schema': {
                    'fields': [{'name': 'id1'}, {'name': 'id2'},],
                    'primaryKey': ['id1', 'id2'],
                },
            }
        ],
    }
    report = validate(descriptor, skip_checks=['duplicate-row'])
    assert log(report) == [
        (1, 3, 1, 'unique-constraint'),
    ]


def test_validate_fk_invalid_reference_table_issue_347(log):
    descriptor = {
        'resources': [
            {
                'name': 'people',
                'data': [
                    ['id', 'name', 'surname'],
                    ['p1', 'Tom', 'Hanks'],
                    ['p2', 'Meryl', 'Streep'],
                ],
                'schema': {
                    'fields': [
                        {'name': 'id', 'type': 'string'},
                        {'name': 'name', 'type': 'string'},
                        {'name': 'surname', 'type': 'string'},
                        {'name': 'dob', 'type': 'date'},
                    ]
                },
            },
            {
                'name': 'oscars',
                'data': [
                    ['person_id', 'category', 'year', 'work'],
                    ['p1', 'Best Actor', 1994, 'Philadelphia'],
                    ['p1', 'Best Actor', 1995, 'Forrest Gump'],
                    ['p2', 'Best Supporting Actress', 1980, 'Kramer vs. Kramer'],
                    ['p2', 'Best Actress', 1982, 'Sophie"s Choice'],
                    ['p2', 'Best Actress', 2012, 'The Iron Lady'],
                    ['p3', 'Best Actor', 2019, 'Joker'],
                ],
                'schema': {
                    'fields': [
                        {'name': 'person_id', 'type': 'string'},
                        {'name': 'category', 'type': 'string'},
                        {'name': 'year', 'type': 'year'},
                        {'name': 'work', 'type': 'string'},
                    ],
                    'foreignKeys': [
                        {
                            'fields': 'person_id',
                            'reference': {'resource': 'people', 'fields': 'id'},
                        }
                    ],
                },
            },
        ]
    }
    report = validate(descriptor, checks=['structure', 'schema', 'foreign-key'])
    assert report['tables'][1]['error-count'] == 6
    assert report['tables'][1]['errors'][0]['code'] == 'foreign-key'
    assert (
        report['tables'][1]['errors'][0]['message']
        == 'Foreign key violation caused by invalid reference table: [people] Row length 3 doesn\'t match fields count 4 for row "2"'
    )
