# Integrity checks


#  unique_field:
#  source: data/unique_field.csv
#  schema: data/unique_field.json
#  checks:
#  - schema
#  report:
#  - [1, 10, 1, 'unique-constraint']


#  unique_field_wrong_type_or_format:
#  source:
#  - [id, unique_number]
#  - [a1, 100]
#  - [a2, not-a-number]
#  - [a3, 100]
#  schema:
#  fields:
#  - {name: id}
#  - {name: unique_number, type: number, constraints: {unique: true}}
#  checks:
#  - structure
#  - schema
#  report:
#  - [1, 3, 2, 'type-or-format-error']
#  - [1, 4, 2, 'unique-constraint']


#  unique_field_wrong_type_or_format:
#  source:
#  - [id, unique_number]
#  - [a1, 100]
#  - [a2, not-a-number]
#  - [a3, 100]
#  schema:
#  fields:
#  - {name: id}
#  - {name: unique_number, type: number, constraints: {unique: true}}
#  checks:
#  - structure
#  - schema
#  report:
#  - [1, 3, 2, 'type-or-format-error']
#  - [1, 4, 2, 'unique-constraint']


#  primary_key_fields:
#  source:
#  - [id, name]
#  - [1, Alex']
#  - [1, John]
#  - ['', Paul]
#  - [1, John]
#  schema:
#  fields:
#  - {name: id, type: integer}
#  - {name: name}
#  primaryKey: [id, name]
#  checks:
#  - schema
#  report:
#  - [1, 4, 1, 'required-constraint']
#  - [1, 5, 1, 'unique-constraint']


def test_composite_primary_key_unique_issue_215(log):
    descriptor = {
        'resources': [
            {
                'name': 'name',
                'data': [['id1', 'id2'], ['a', '1'], ['a', '2'],],
                'schema': {
                    'fields': [{'name': 'id1'}, {'name': 'id2'},],
                    'primaryKey': ['id1', 'id2'],
                },
            }
        ],
    }
    report = validate(descriptor)
    assert log(report) == []


def test_composite_primary_key_not_unique_issue_215(log):
    descriptor = {
        'resources': [
            {
                'name': 'name',
                'data': [['id1', 'id2'], ['a', '1'], ['a', '1'],],
                'schema': {
                    'fields': [{'name': 'id1'}, {'name': 'id2'},],
                    'primaryKey': ['id1', 'id2'],
                },
            }
        ],
    }
    report = validate(descriptor, skip_checks=['duplicate-row'])
    assert log(report) == [
        (1, 3, 1, 'unique-constraint'),
    ]


def test_validate_fk_invalid_reference_table_issue_347(log):
    descriptor = {
        'resources': [
            {
                'name': 'people',
                'data': [
                    ['id', 'name', 'surname'],
                    ['p1', 'Tom', 'Hanks'],
                    ['p2', 'Meryl', 'Streep'],
                ],
                'schema': {
                    'fields': [
                        {'name': 'id', 'type': 'string'},
                        {'name': 'name', 'type': 'string'},
                        {'name': 'surname', 'type': 'string'},
                        {'name': 'dob', 'type': 'date'},
                    ]
                },
            },
            {
                'name': 'oscars',
                'data': [
                    ['person_id', 'category', 'year', 'work'],
                    ['p1', 'Best Actor', 1994, 'Philadelphia'],
                    ['p1', 'Best Actor', 1995, 'Forrest Gump'],
                    ['p2', 'Best Supporting Actress', 1980, 'Kramer vs. Kramer'],
                    ['p2', 'Best Actress', 1982, 'Sophie"s Choice'],
                    ['p2', 'Best Actress', 2012, 'The Iron Lady'],
                    ['p3', 'Best Actor', 2019, 'Joker'],
                ],
                'schema': {
                    'fields': [
                        {'name': 'person_id', 'type': 'string'},
                        {'name': 'category', 'type': 'string'},
                        {'name': 'year', 'type': 'year'},
                        {'name': 'work', 'type': 'string'},
                    ],
                    'foreignKeys': [
                        {
                            'fields': 'person_id',
                            'reference': {'resource': 'people', 'fields': 'id'},
                        }
                    ],
                },
            },
        ]
    }
    report = validate(descriptor, checks=['structure', 'schema', 'foreign-key'])
    assert report['tables'][1]['error-count'] == 6
    assert report['tables'][1]['errors'][0]['code'] == 'foreign-key'
    assert (
        report['tables'][1]['errors'][0]['message']
        == 'Foreign key violation caused by invalid reference table: [people] Row length 3 doesn\'t match fields count 4 for row "2"'
    )


# Package

DESCRIPTOR = {
    'resources': [
        {
            'name': 'resource1',
            'path': 'data/valid.csv',
            'bytes': 30,
            'hash': 'sha256:a1fd6c5ff3494f697874deeb07f69f8667e903dd94a7bc062dd57550cea26da8',
        }
    ]
}


def test_check_file_integrity(log):
    source = deepcopy(DESCRIPTOR)
    report = validate(source)
    assert log(report) == []


def test_check_file_integrity_invalid(log):
    source = deepcopy(DESCRIPTOR)
    source['resources'][0]['bytes'] += 1
    source['resources'][0]['hash'] += 'a'
    report = validate(source)
    assert report['tables'][0]['errors'] == [
        {
            'code': 'source-error',
            'message': 'Calculated size "30" and hash "a1fd6c5ff3494f697874deeb07f69f8667e903dd94a7bc062dd57550cea26da8" differ(s) from declared value(s)',
            'message-data': {},
        }
    ]


def test_check_file_integrity_size(log):
    source = deepcopy(DESCRIPTOR)
    source['resources'][0]['hash'] = None
    report = validate(source)
    assert log(report) == []


def test_check_file_integrity_size_invalid(log):
    source = deepcopy(DESCRIPTOR)
    source['resources'][0]['bytes'] += 1
    source['resources'][0]['hash'] = None
    report = validate(source)
    assert report['tables'][0]['errors'] == [
        {
            'code': 'source-error',
            'message': 'Calculated size "30" differ(s) from declared value(s)',
            'message-data': {},
        }
    ]


def test_check_file_integrity_hash(log):
    source = deepcopy(DESCRIPTOR)
    source['resources'][0]['bytes'] = None
    report = validate(source)
    assert log(report) == []


def test_check_file_integrity_hash_invalid(log):
    source = deepcopy(DESCRIPTOR)
    source['resources'][0]['bytes'] = None
    source['resources'][0]['hash'] += 'a'
    report = validate(source)
    assert report['tables'][0]['errors'] == [
        {
            'code': 'source-error',
            'message': 'Calculated hash "a1fd6c5ff3494f697874deeb07f69f8667e903dd94a7bc062dd57550cea26da8" differ(s) from declared value(s)',
            'message-data': {},
        }
    ]


def test_check_file_integrity_invalid(log):
    source = deepcopy(DESCRIPTOR)
    source['resources'][0]['hash'] = 'not-supported-hash'
    report = validate(source)
    assert report['warnings'] == [
        'Resource "resource1" does not use the SHA256 hash. The check will be skipped',
    ]


FK_DESCRIPTOR = {
    'resources': [
        {
            'name': 'cities',
            'data': [
                ['id', 'name', 'next_id'],
                [1, 'london', 2],
                [2, 'paris', 3],
                [3, 'rome', 4],
                [4, 'rio', None],
            ],
            'schema': {
                'fields': [
                    {'name': 'id', 'type': 'integer'},
                    {'name': 'name', 'type': 'string'},
                    {'name': 'next_id', 'type': 'integer'},
                ],
                'foreignKeys': [
                    {'fields': 'next_id', 'reference': {'resource': '', 'fields': 'id'},},
                    {
                        'fields': 'id',
                        'reference': {'resource': 'people', 'fields': 'label'},
                    },
                ],
            },
        },
        {
            'name': 'people',
            'data': [['label', 'population'], [1, 8], [2, 2], [3, 3], [4, 6],],
        },
    ],
}


def test_foreign_key(log):
    descriptor = deepcopy(FK_DESCRIPTOR)
    report = validate(descriptor, checks=['foreign-key'])
    assert log(report) == []


def test_foreign_key_not_defined_foreign_keys(log):
    descriptor = deepcopy(FK_DESCRIPTOR)
    del descriptor['resources'][0]['schema']['foreignKeys']
    report = validate(descriptor, checks=['foreign-key'])
    assert log(report) == []


def test_foreign_key_source_is_not_datapackage(log):
    report = validate('data/valid.csv', checks=['foreign-key'])
    assert log(report) == []


def test_foreign_key_self_referenced_resource_violation(log):
    descriptor = deepcopy(FK_DESCRIPTOR)
    del descriptor['resources'][0]['data'][4]
    report = validate(descriptor, checks=['foreign-key'])
    assert log(report) == [
        (1, 4, 3, 'foreign-key'),
    ]


def test_foreign_key_internal_resource_violation(log):
    descriptor = deepcopy(FK_DESCRIPTOR)
    del descriptor['resources'][1]['data'][4]
    report = validate(descriptor, checks=['foreign-key'])
    assert log(report) == [
        (1, 5, 1, 'foreign-key'),
    ]


def test_foreign_key_internal_resource_violation_non_existent(log):
    descriptor = deepcopy(FK_DESCRIPTOR)
    del descriptor['resources'][1]
    report = validate(descriptor, checks=['foreign-key'])
    assert log(report) == [
        (1, 2, 1, 'foreign-key'),
        (1, 3, 1, 'foreign-key'),
        (1, 4, 1, 'foreign-key'),
        (1, 5, 1, 'foreign-key'),
    ]


def test_foreign_key_external_resource(log):
    descriptor = 'data/datapackages_linked/cities/datapackage.json'
    report = validate(descriptor, checks=['structure', 'schema', 'foreign-key'])
    assert log(report) == []


def test_foreign_key_external_resource_errors(log):
    descriptor = 'data/datapackages_linked_errors/cities/datapackage.json'
    report = validate(descriptor, checks=['structure', 'schema', 'foreign-key'])
    assert log(report) == [
        (1, 4, 1, 'foreign-key'),  # self-referenced
        (1, 4, 3, 'foreign-key'),  # external
    ]


def test_foreign_key_external_resource_remote_datapackage(log):
    descriptor = {
        'resources': [
            {
                'name': 'countries',
                'data': [
                    ['Country Code', 'Country Name'],
                    ['PRT', 'Portugal'],
                    ['DRL', 'Dreamland'],
                ],
                'schema': {
                    'fields': [
                        {'name': 'Country Code', 'type': 'string'},
                        {'name': 'Country Name', 'type': 'string'},
                    ],
                    'foreignKeys': [
                        {
                            'fields': 'Country Code',
                            'reference': {
                                'package': 'https://raw.githubusercontent.com/datasets/gdp/master/datapackage.json',
                                'resource': 'gdp',
                                'fields': 'Country Code',
                            },
                        },
                    ],
                },
            }
        ]
    }
    report = validate(descriptor, checks=['structure', 'schema', 'foreign-key'])
    assert log(report) == [
        (1, 3, 1, 'foreign-key'),
    ]
